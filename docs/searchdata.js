var SearchFiles = ["GUID-408D6777-0172-406B-8442-B97FD5287AC8.html",
							"GUID-408D6777-0172-406B-8442-B97FD5287AC8.html",
							"GUID-408D6777-0172-406B-8442-B97FD5287AC8.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-296956BD-C385-44FC-A4BC-87E05F4DD855.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-6519369E-505B-4BAB-9E2D-3E25E5275D1F.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-3CE5661D-A17C-4ED4-8F6B-85D06B6A2745.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-C0F1A462-D7AD-4584-A60B-E8B363C87E96.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-9868F88F-53EE-443C-8987-C22CEBDCA6B2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-158E2C2E-4630-480F-A883-E73F8DF2E8E2.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-9AECFB48-EFE5-41CC-873E-F44434E5A0F5.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-BEDEA1D0-A098-43BE-87DE-5168F0C22D4E.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-2D173E29-3A9D-4A1E-A3CB-B2FC0CF4A3E3.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-FDFC0E9B-1CC7-4AC9-8D96-B833A308F1F8.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html",
							"GUID-BC3096AD-26D9-4501-9E18-E8746EEEDF35.html"];

var SearchTitles = ["Harmony 3 audio application examples",
"Contents Summary",
"Code Examples",
"audio_enc",
"Description",
"Architecture",
"Architecture Block Diagram",
"Demonstration Features",
"Harmony Configuration",
"Tools Setup Differences",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Demonstration",
"Control Description",
"Button Operations",
"Status Indicator Description",
"LED Status",
"audio_player_basic",
"Description",
"Supported Format",
"Architecture",
"Architecture Block Diagram",
"Demonstration Features",
"Harmony Configuration",
"Tools Setup Differences",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Demonstration",
"Figure 1: SD Card slot on bottom of SAM E54 Curiosity Ultra Board",
"Figure 2: WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board Control Description",
"Button Operations",
"Status Indicator Description",
"LED Status",
"audio_tone",
"Description",
"Architecture",
"Demonstration Features",
"Tools Setup Differences",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Demonstration",
"Figure 1: AK4954 Audio Codec Daughter Board on PIC32 MZ EF Curiosity 2 0 Board",
"Figure 2: WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board",
"Control Descriptions",
"Table 1: Button Controls for PIC32 MZ EF Curiosity 2 0 board SAM E54 Curiosity Ultra board and SAM E70 Xplained Ultra board",
"Table 2: Button Controls for SAM V71 Xplained Ultra board",
"audio_tone_linkeddma",
"Description",
"Architecture",
"Demonstration Features",
"Tools Setup Differences",
"Bulding the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Demonstration",
"Control Descriptions",
"Table 1: Button Controls for SAM E70 Xplained Ultra board",
"microphone_loopback",
"Description",
"Architecture",
"Demonstration Features",
"Tools Setup Differences",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Demonstration",
"Control Descriptions",
"Figure 1: AK4954 Audio Codec Daughter Board on PIC32 MZ EF Curiosity 2 0 Board",
"Figure 2: WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board",
"Table 1: Button Controls for PIC32MZ Ef Curiosity 2 0 SAM E54 Curiosity Ultra board and SAM E70 Xplained Ultra board",
"Table 2: Button Controls for SAM V71 Xplained Ultra board",
"universal_audio_decoders",
"Description",
"Architecture",
"Demonstration Features",
"Tools Setup Differences",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Demonstration",
"Button Operations",
"Status Indicator Description",
"LED Status",
"usb_headset",
"Description",
"Architecture",
"Demonstration Features",
"Tools Setup Differences",
"Harmony MHC Component Blocks",
"Harmony Core Block",
"USB Audio Component Blocks",
"AK4965 Daughter Board Component Blocks",
"Debug Console Output",
"Harmony Code Configuration Options",
"USB Configuration",
"The AK4954 Codec",
"Clock Manager",
"PIC32 MZ EF PLL Clock",
"I2SC2 REFCLOCK01 Configuration",
"Harmony Code Generation",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Using the PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board:",
"Running the Demonstration",
"Description",
"Control Description",
"usb_microphone",
"Description",
"Architecture",
"Demonstration Features",
"Harmony Configuration and Code Generation",
"Tools Setup Differences",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Demonstration",
"Control Description",
"usb_speaker",
"Description",
"Architecture",
"Demonstration Features",
"Tools Setup Differences",
"Harmony Configuration",
"PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board Configuration",
"Harmony Code Configuration Options",
"The WM8904 Codec",
"Pin Manager",
"Clock Manager",
"MPLAB Harmony Configurator: Tools Clock Configuration",
"SSC Clock Configuration",
"I2SC1 Clock Configuration",
"Harmony Code Generation",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Demonstration",
"Control Description",
"usb_speaker_bass_boost",
"Description",
"Architecture",
"Bass Boost Filter",
"Demonstration Features",
"Tools Setup Differences",
"Harmony Configuration",
"PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board Configuration",
"SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board Configuration",
"Harmony Code Configuration Options",
"USB Configuration",
"The WM8904 Codec",
"Pin Manager",
"Clock Manager",
"MPLAB Harmony Configurator: Tools Clock Configuration",
"I2SC1 Clock Configuration",
"AK4954 Codec",
"Math Library",
"Harmony Code Generation",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Demonstration",
"Control Description",
"usb_speaker_hi_res",
"Description",
"Architecture",
"Demonstration Features",
"Tools Setup Differences",
"Harmony Configuration",
"Harmony Code Generation",
"USB Configuration",
"The WM8904 Codec",
"Pin Manager",
"Clock Manager",
"I2SC1 Clock Configuration",
"MPLAB Harmony Configurator: Timer Driver (TC0)",
"Building the Application",
"MPLAB X IDE Project Configurations",
"Configuring the Hardware",
"Running the Application",
"Control Description"];

var SearchInfo = [" Harmony 3 audio application examples MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices Refer to the following links for more information Refer to the following links for more information: Microchip 32-bit MCUs Microchip 32-bit MPUs Microchip MPLAB X IDE Microchip MPLAB® Harmony Microchip MPLAB® Harmony Pages This repository contains the MPLAB® Harmony 3 audio solutions and example applications This also contains: Release Notes MPLAB® Harmony License To clone or download these applications from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  ",
							" Contents Summary Folder Description apps Contains audio example applications ",
							" Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries Name Description audio_enc Audio encoder for WAV files audio_player_basic Audio player for WAV files audio_tone Audio tone generator audio_tone_linkeddma Audio tone generator using linked DMA microphone_loopback Microphone loopback demo universal_audio_decoders Audio player for WAV ADPCM FLAC and MP3 files usb_headset USB headset demo usb_microphone USB Microphone Demo usb_speaker USB speaker demo usb_speaker_bass_boost USB speaker w/ bass boost usb_speaker_hi_res USB speaker hi res (96 kHz/24-bits) ",
							" audio_enc This readme file provides instructions and information about the MPLAB Harmony 3 Audio Encoder demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description The audio encoder (audio_enc) application configures the SAM E70 Xplained Ultra development board to be in USB Host Mass Storage Device (MSD) mode The application supports read/write from/to the FAT file system When a mass storage device is connected to the development board via its target USB port the device is mounted After the MSD is mounted the application waits for a short button press ( 1 sec) to start recording data from the mic input on the WM8904 Audio Codec Module This recording will continue until another short press is detected signaling to stop recording The recorded data is then PCM encoded and packed into a wav container file and saved on the MSD The app then waits to playback the last recorded file or encode another file All encodings are at 16K sample rate stereo and 16 bit depth The name of the encoded file will be created according to the following (enc16K16b 000-999 wav) A file will not be written over if it already exists If a file is found to be already on the MSD the numeric part of the file name will be incremented once until an unused file name is found If trying to playback the last encoded file but there has been no file encoded yet both LEDs will flash and the app will go back to waiting to start encoding a file If there is a file available to be played the app will read the wav file data and write it to the codec for playback Command and control to the codec is done through an I2C driver Data to the codec driver is sent through I2SC via I2S Driver and the output will be audible through the headphone output jack of the WM8904 Audio Codec Module connected to the SAM E70 Xplained Ultra board The below architecture diagram depicts a representation of the application The current development board SAM E70 Xplained Ultra supplies one button and two LEDs for control and status feedback LED 1 is amber and LED 2 is green The application currently only supports PCM encoding and playback to and from a wav file container Supported audio files are as represented in the table below Audio Format Sample Rate (kHz) Description PCM 16 PCM (Pulse Code Modulation) is an uncompressed format The digital data is a direct representation of the analog audio waveform The container for the data will be a WAVE file ( wav) format It is the native file format used by Microsoft Windows for storing digital audio data ",
							" Architecture The audio encoder (audio_enc) application uses the MPLAB Harmony Configurator to setup the USB Host FS Codec and other items in order to read the music files on a USB MSD drive and play it back on the WM8904 Codec Module It scans WAV (PCM) format files on mounted FAT USB thumb drive and streams audio through a WM8904 Audio Codec to a speaker In the application the number of audio output buffers can always set to be more than two to enhance the audio quality And the size of input buffer in this application is chosen to be able to handle all data supported The following figure shows the architecture for the demonstration ",
							" Architecture Block Diagram ",
							" Demonstration Features USB MSD Host Client Driver (see H3 USB MSD Host Client Driver Library) FAT File System (see H3 File System Service Library) Audio real-time buffer handling WM8904 Codec Driver (see H3 CODEC Driver Libraries) I2S usage in audio system (see H3 I2S Driver Library Help) DMA (see H3 DMA area) Timer (see H3 Timer area) GPIO Control (see H3 GPIO area) ",
							" Harmony Configuration Add BSP- SAM E70 Xplained Ultra BSP Add Audio- Templates- WM8904 Codec Yes to all popups Modify WM8904 Codec from SSC to I2SC Yes to all popups Add Libraries- USB- Host Stack- MSD Client Driver a Yes to all popups Add Harmony- System Services- FILE SYSTEM Add Harmony- Audio- Decoder- AudioDecoderLibraries Add Harmony- Audio- Encoder- AudioEncoderLibraries Remove FreeRTOS if Bare Metal version Connect MSD Client Driver: DRV_MEDIA to FILE SYSTEM: DRV_MEDIA After reorganization your graph should look similar to the following: If using FreeRTOS your diagram will be slightly different You will see an additional block for FreeRTOS as shown below ",
							" Tools Setup Differences The default configuration should be correct for the majority of the app The following configurations will need to be changed for proper operations MPLAB Harmony Configurator: Tools- Clock Configuration Uncheck the Main RC Oscillator and check the \"Bypass\" for the Main Crystal Oscillator When the Bypass is checked it will cause the Main Crystal Oscillator to become unchecked Enable the PLLA Clock output Enable clocking for the I2S1 To set the sample rate to a fixed 16KHz set the PLLA divisor to 2 and the multiplier to 43 Also set the I2S1 divisor to 63 Please see the two images above MPLAB Harmony Configurator: WM8904 MPLAB Harmony Configurator: File System The Auto Mount feature must be selected in order to expose the media type selection The media type that is being used in this application is Mass Storage Device This must be correctly configured or the storage device will not mount MPLAB Harmony Configurator: I2C Driver If you are using FreeRTOS set the driver mode back to Asynchronous MPLAB Harmony Configurator: System Set the heap size in Harmony if it is not already set for the linker MPLAB Harmony Configurator: EFC Set the memory wait states to 6 if not already set MPLAB Harmony Configurator: Audio Decoder Libraries Disable the ADPCM Decoder for this particular app Save and generate code for the framework ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/audio_enc To build this project you must open the audio/apps/audio_enc/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration ",
							" MPLAB X IDE Project Configurations The following table lists and describes supported project configurations Project Name BSP Used Description audio_enc_sam_e70_xult_wm8904_i2sc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board with the WM8904 Audio Codec Module attached The project configuration is for encode/playback of an audio file to/from a USB Mass Storage Device Data to be tx/rx to/from the Codec via I2S audio protocol using the I2SC PLIB The WM8904 codec is configured as the slave and the I2SC peripheral as the master audio_enc_sam_e70_xult_wm8904_i2sc_freertos sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board with the WM8904 Audio Codec Module attached The project configuration is for encode/playback of an audio file to/from a USB Mass Storage Device Data to be tx/rx to/from the Codec via I2S audio protocol using the I2SC PLIB The WM8904 codec is configured as the slave and the I2SC peripheral as the master This demonstration also uses FreeRTOS ",
							" Configuring the Hardware This section describes how to configure the supported hardware Description This application uses the I2SC PLIB to transfer data to the WM8904 Audio Codec Daughter Board To connect to the I2SC the jumpers (J6 J7 J8 and J9) on the WM8904 Codec Daughter Board must be oriented towards the pink mic in connector See the red outlined jumpers in the below image as reference  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 ",
							" Running the Demonstration This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues Compile and program the target device While compiling select the appropriate MPLAB X IDE project based Refer to Building the Application for details Connect headphones to the green HP OUT jack of the WM8904 Audio Codec Daughter Board and a microphone to the pink MIC IN jack Connect power to the board The system will be in a wait state for USB to be connected (amber LED1 blinking) Connect a USB mass storage device (thumb drive) to the USB TARGET connector of the SAM E70 Xplained Ultra board You will probably need a USB-A Female to Micro-B Male adapter cable to do so The application currently can only record WAVE ( wav) format audio files ",
							" Control Description Long presses of the push button cause the app to attempt to playback the last encoded file that is saved on the MSD The two LEDs flash if there is no file that has been encoded Short presses of the push button cause the app to start or stop encoding Button control is shown in the table below ",
							" Button Operations Operation Function Long Press ( 1 sec) Play back the last encoded Short Press ( 1 sec) Start/Stop Encoding ",
							" Status Indicator Description When the application first starts running it looks to find an attached storage device If one is not found LED1 will toggle on and off about every 100 ms indicating that a storage device is not attached If/When a storage device is attached LED1 will turn off LED2 will turn on when the application is ready to start encoding or playback the last encoded file If playback is chosen without first creating an encoded file LED1 and LED2 will toggle briefly then the app will wait for encoding to start LED status indication is shown in the table below ",
							" LED Status Operation LED 1 Status LED 2 Status No Storage Device Connected Toggling Off Storage Device Connected Off Don't Care Ready to Encode/Playback Off Don't Care Not Ready to Encode/Playback Off Off Encoding Off Toggling Playback before Encoded File Created Toggling Toggling ",
							" audio_player_basic This topic provides instructions and information about the MPLAB Harmony 3 Audio Player Basic demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description The audio player (audio_player_basic) application configures the development board to use a microSD card or be in USB Host Mass Storage Device (MSD) mode The application supports the FAT file system When a mass storage device is connected to the development board via its Target USB port the device is mounted and the application begins to scan for files starting at the root directory It will search for wav files up to 10 directory levels deep A list of files found and their paths will be created and stored Once the scan is complete the first track in the list will be opened validated and played The application will read the wav file header to validate Configuration of the number of channels sample size and sample rate stated in the file will be handled by the application for proper playback If a file that can't be played is found it will be skipped and the next sequential file will be tried If the file can be played it will then go on and read the wav file data and write it to the codec for playback Command and control of the codec is done through an I2C driver Data to the codec driver is sent through SSC via I2S Driver and the output will be audible through the headphone output jack of the WM8904 Audio Codec Module connected to the SAM E70 Xplained Ultra board Supported audio files are as represented in the table below ",
							" Supported Format Audio Format Sample Rate (kHz) Description PCM 8 to 96 PCM (Pulse Code Modulation) is an uncompressed format The digital data is a direct representation of the analog audio waveform The container for the data will be a WAVE file ( wav) format It is the native file format used by Microsoft Windows for storing digital audio data The defines DISK_MAX_DIRS and DISK_MAX_FILES in the app h file determines the maximum number of directories that should be scanned at each level of the directory tree (to prevent stack overflow the traversing level is limited to 10) and the maximum number of songs in total the demonstration should scan (currently set to 4000 because of memory limitations) ",
							" Architecture The application runs on the SAM E70 Xplained Ultra Board which contains a ATSAME70Q21B microcontroller with 2 MB of Flash memory and 384 KB of RAM running at 300 MHz using the following features: One push button (SW1) Two LEDs (amber LED1 and green LED2) WM8904 Codec Daughter Board mounted on a X32 socket The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 The application currently only supports WAVE ( wav) format files and ADPCM ( pcm) files The audio_player_basic application uses the MPLAB Harmony Configurator to setup the USB MSD Host file system codec and other items in order to read the music files on a USB mass storage device and play it back through the WM8904 Codec Module It scans WAV (PCM) format files from a mounted FAT drive and streams audio through a WM8904 Audio Codec to a pair of headphones In the application the number of audio output buffers can always be set to more than two to enhance the audio quality The size of input buffer in this application is chosen to be able to handle the data supported The following figure shows the architecture for the demonstration (USB Host version shown): ",
							" Architecture Block Diagram ",
							" Demonstration Features USB MSD Host Client Driver (see USB MSD Host Client Driver Library) microSD card FAT File System (see File System Service Library) Audio real-time buffer handling WM8904 Codec Driver (see Audio Codec Driver Libraries) I 2 S usage in audio system (see I2S Driver Library) DMA (see DMA Peripheral Library) Timer (see Timer Peripheral Library) GPIO Control (see Port Peripheral Library) ",
							" Harmony Configuration Add BSP- SAM E70 Xplained Ultra BSP Add Audio- Templates- WM8904 Codec a Yes to all popups Add Libraries- USB- Host Stack- MSD Client Driver a Yes to all popups Add Harmony- System Services- FILE SYSTEM Remove FreeRTOS if Bare Metal or Graphics versions Add Harmony- Audio- Decoder- Audio Decoder Libraries Connect MSD Client Driver: DRV_MEDIA to FILE SYSTEM: DRV_MEDIA Connect WM8904 Driver:DRV_I2S to I2S Driver:DRV_I2S After reorganization your graph would look similar to one of the following project graphs They specify the drivers services and libraries being brought into the project to further extend the applications abilities Fig 2 (Project graph of the default E70 bare metal configuration using the SSC) Fig 3 (Project graph of the E70 FreeRTOS configuration using the SSC) Fig 4 (Project graph of the E54 bare metal configuration using the I2S) Fig 5 (Project graph of the E54 FreeRTOS configuration using the I2S) ",
							" Tools Setup Differences The default configuration should be correct for the majority of the application The following configurations will need to be changed in order for proper operations For projects using the E54 Curiosity Ultra the I2S interface and the WM8904 as a Slave (the E54 generates the I2S clocks): In the MPLAB Harmony Configurator: Tools Clock  Configuration dialog: Set enable the Crystal Oscillator change it frequency to 12 000 000 Hz and select CRYSTAL Uncheck the Fractional Digital Phase Locked Loop enable (FDPLL 0) In the CLK Generator 0 box change the input to DFLL for an output of 48 MHz In the CLK Generator 1 box change the input to XOSC0 with a divider of 1 for an output of 12 MHz In the GCLK Generator uncheck the selection for GCLK 2 and then select the GCLK 3 tab Choose the DFLL as the input with a divide by 4 for an output of 12 MHz You should end up with a clock diagram like this: For projects using the E70 Xplained Ultra the SSC interface and the WM8904 as a Master (the WM8904 codec generates the I2S clocks): In the MPLAB Harmony Configurator: Tools Clock  Configuration dialog: Uncheck the Main RC Oscillator and check the \"Bypass\" for the Main Crystal Oscillator When the Bypass is checked it will cause the Main Crystal Oscillator to become unchecked Enable the PCK2 output to enable the WM8904 master clock: Clock Diagram Peripheral Clock Enable Enable clocking for the SSC In the MPLAB Harmony Configurator: File System dialog_:_ The Auto Mount feature must be selected in order to expose the media type selection The media type that is being used in this application is Mass Storage Device This must be correctly configured or the storage device will not mount In the MPLAB Harmony Configurator: System dialog: Set the heap size in Harmony if it is not already set for the linker Certain projects may set the heap to a larger size automatically ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/audio_player_basic To build this project you must open the audio/apps/audio_player_basic/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration ",
							" MPLAB X IDE Project Configurations The following table lists and describes supported project configurations Project Name BSP Used Description apb_sam_e54_ult_wm8904_i2s_sdmmc sam_e54_cult This demonstration runs on the ATSAME54P20A processor on the SAM E54 Curiosity Ultra board with the WM8904 Audio Codec Daughter Board The WM8904 codec is configured as the master and the I2S peripheral as the slave The project config is for reading data from a microSD card The data is sent to the headphone output of the codec daughter card via I2S driver apb_sam_e54_ult_wm8904_i2s_sdmmc_freertos sam_e54_cult This demonstration runs on the ATSAME54P20A processor on the SAM E54 Curiosity Ultra board with the WM8904 Audio Codec Daughter Board The WM8904 codec is configured as the master and the I2S peripheral as the slave The project config is for reading data from a microSD card The data is sent to the headphone output of the codec daughter card via I2S driver This demonstration uses FreeRTOS to schedule running tasks apb_sam_e70_xult_wm8904_ssc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board with the WM8904 Audio Codec Daughter Board The WM8904 codec is configured as the master and the SSC peripheral as the slave The project configuration is for reading data from a file on a USB Mass Storage Device The data is sent to the headphone output of the codec daughter card via I2S protocol using the SSC PLib apb_sam_e70_xult_wm8904_ssc_freertos sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board with the WM8904 Audio Codec Daughter Board The WM8904 codec is configured as the master and the SSC peripheral as the slave The project configuration is for reading data from a file on a USB Mass Storage Device The data is sent to the headphone output of the codec daughter card via I2S protocol using the SSC PLib This demonstration uses FreeRTOS to schedule tasks to run ",
							" Configuring the Hardware This section describes how to configure the supported hardware Description Using the SAM E54 Curiosity Ultra board and the WM8904 Audio Codec Daughter Board using the I2S PLIB: To connect to the I2S the jumpers (J6 J7 J8 and J9) on the WM8904 Codec Daughterboard must be oriented away from the pink mic in connector See the red outlined jumpers in the below image as reference In addition make sure the J401 jumper (CLK SELECT) is set for the PA17 pin:  Note: The SAM E54 Curiosity Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board using the SSC PLIB: Jumper J203 which is next to the SAM E70 Xplained Ultra logo should be jumpered for LED2 To connect to the SSC the jumpers (J6 J7 J8 and J9) on the WM8904 Codec Daughterboard must be oriented away from the pink mic in connector See the red outlined jumpers in the below image as reference  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 ",
							" Running the Demonstration This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues Compile and program the target device While compiling select the appropriate MPLAB X IDE project based Refer to Building the Application for details Connect headphones to the HP OUT jack of the WM8904 Audio Codec Daughter Board (see Figure 2 below ) Connect power to the board The system will be in a wait state for USB to be connected (amber LED1 blinking) For the E54 board: Insert a micro SD card into the slot on the bottom side of the board as shown in Figure 1 The contacts of the micro SD card should be facing the bottom side of the board ",
							" Figure 1: SD Card slot on bottom of SAM E54 Curiosity Ultra Board For the E70 board: Connect a USB mass storage device (thumb drive) that contains songs of supported audio format to the USB TARGET connector of the SAM E70 Xplained Ultra board You will probably need a USB-A Female to Micro-B Male adapter cable to do so The application currently can only stream WAVE ( wav) format audio files When the device is connected the system will scan for audio files Once the scanning is complete and at least one file is found (green LED2 on steady) listen to the audio output on headphones connected to the board Use Switch SW1 as described under Control Description to change the volume or advance to the next track ",
							" Figure 2: WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board Control Description Long presses of the push button cycle between volume control and the linear track change mode When in volume control mode short presses of the push button cycle between Low Medium High and Mute volume outputs While in the Mute mode a pause of the playback will also take place When in the linear track change mode short presses of the push button will seek to the end of the currently playing track and willstart the next track that was found in sequence After all tracks have been played the first track will start again in the same sequential order Button control is shown in the table below ",
							" Button Operations Long Press ( 1 sec) Short Press ( 1 sec) Volume Control Low (-66 dB) - Medium (-48 dB) - High (0 dB) - Mute/Pause   Linear Track Change Next sequential track ",
							" Status Indicator Description When the application first starts running it looks to find an attached storage device If one is not found LED1 will toggle on and off about every 100ms indicating that a storage device is not attached When a storage device is attached LED1 will turn off At this time the file system will be scanned for WAVE files with a wav extension If no WAVE files are found on the storage device LED2 will remain off and scanning of the device will continue If any WAVE files are found LED2 will turn on and playback of the first file found in sequence will start LED status indication is shown in the table below ",
							" LED Status Operation LED1 Status (Red) LED2 Status (Green) No Storage Device Connected Toggle 100ms Off Storage Device Connected Off See Files Found Operation Playback: Volume Control Off See Files Found Operation Playback: Volume Mute Toggle 500ms See Files Found Operation Playback: Linear Track Change On See Files Found Operation Files Found (Yes/No) See above operations On/Off ",
							" audio_tone This topic provides instructions and information about the MPLAB Harmony 3 Audio Tone demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description In this demonstration application the Codec Driver sets up an AK4954 or WM8904 Codec The demonstration sends out generated audio waveforms (sine tone) with volume and frequency modifiable through the on-board push button Success is indicated by an audible output corresponding to displayed parameters The sine tone is one of four frequencies: 250 Hz 500 Hz 1 kHz and 2 kHz sent by default at 48 000 samples/second which is modifiable in the MHC as described below To know more about the MPLAB Harmony Codec Drivers configuring the Codec Drivers and the APIs provided by the Codec Drivers refer to Codec Driver Libraries ",
							" Architecture There are eight different projects packaged in this application PIC32 MZ EF Curiosity 2 0 Project: One project runs on the PIC32 MZ EF Curiosity 2 0 board using the PIC32MZ2048EFM144 microcontroller with 2 MB of Flash memory and 512 KB of RAM running at 198 MHz The PIC32 MZ EF Curiosity 2 0 board includes the following features: Four push buttons (SW1-SW4 only SW1 is used) Four LEDs (LED1-LED4 only LED1 is used) AK4954 Codec Daughter Board mounted on X32 HEADER 2 socket The PIC32 MZ EF Curiosity 2 0 board does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 The program takes up to approximately 3% (55 KB) of the PIC32MZ2048EFM144 microcontroller’s program space and 23% (115 KB) of the RAM No heap is used The following figure illustrates the application architecture for the PIC32 MZ EF Curiosity 2 0 configuration: For both configurations the I2S (Inter-IC Sound Controller) is used with the AK4954 codec The AK4954 is configured in slave mode meaning it receives I2S clocks (LRCLK and BCLK) from the PIC32 and the I2S peripheral is configured as a master SAM E54 Curiosity Ultra Projects: Two projects run on the SAM E54 Curiosity Ultra Board which contains a ATSAME54P20A microcontroller with 1 MB of Flash memory and 256 KB of RAM running at 48 MHz using the following features: Two push buttons (SW1 and SW2 only SW1 is used) Two LEDs (LED1 and 2 only LED1 is used) WM8904 Codec Daughter Board mounted on a X32 socket The SAM E54 Curiosity Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 The non-RTOS version of the program takes up to approximately 3% (28 KB) of the ATSAME54P20A microcontroller’s program space The 16-bit configuration uses 45% (115 KB) of the RAM No heap is used For the FreeRTOS project the program takes up to approximately 1% (22 KB) of the ATSAME54P20A microcontroller’s program space and the 16-bit configuration uses 60% (155 KB) of the RAM No heap is used The following figure illustrates the application architecture for the two SAM E54 Xplained Ultra configurations (RTOS not shown): The I2S (Inter-IC Sound Controller) is used with the WM8904 codec The WM8904 is configured in master mode meaning it generates the I 2 S clocks (LRCLK and BCLK) and the I2S peripheral is configured as a slave SAM E70 Xplained Ultra Projects: Four projects run on the SAM E70 Xplained Ultra Board which contains a ATSAME70Q21B microcontroller with 2 MB of Flash memory and 384 KB of RAM running at 300 MHz using the following features: One push button (SW1 may be labeled as SW0 on some boards) Two LEDs (LED1 and 2 only LED1 is used) AK4954 or WM8904 Codec Daughter Board mounted on a X32 socket The SAM E70 Xplained Ultra board does not include the AK4954 or WM8904 Audio Codec daughterboards which are sold separately on microchipDIRECT as part numbers AC324954 and AC328904 respectively The two non-RTOS versions of the program take up to approximately 1% (18 KB) of the ATSAME70Q21B microcontroller’s program space The 16-bit configuration uses 30% (115 KB) of the RAM No heap is used For the FreeRTOS project the program takes up to approximately 1% (22 KB) of the ATSAME70Q21B microcontroller’s program space and the 16-bit configuration uses 41% (155 KB) of the RAM No heap is used The following figure illustrates the application architecture for the three SAM E70 Xplained Ultra configurations using the WM8904 (RTOS not shown) The AK4954 version is the same with the substitution of the AK4954 Driver and Codec blocks The AK4954 codec is only used with the SSC (Synchronous Serial Controller) The WM8904 is configured in slave mode and the SSC peripheral is a master and generates the I2SC clocks Depending on the project either the SSC (Synchronous Serial Controller) or I2SC (Inter-IC Sound Controller) is used with the WM8904 codec selected by a strapping option on the WM8904 daughterboard When using the SSC interface the WM8904 is configured in master mode meaning it generates the I 2 S clocks (LRCLK and BCLK) and the SSC peripheral is configured as a slave When using the I2SC interface the WM8904 is configured in slave mode and the SSC peripheral is a master and generates the I2SC clocks The other two possibilities (SSC as master and WM8904 as slave or I2SC as slave and WM8904 as master) are possible but not discussed SAMV71 Xplained Ultra Project: One project runs on the SAMV71 Xplained Ultra Board which contains a ATSAMV71Q21B microcontroller with 2 MB of Flash memory and 384 KB of RAM running at 300 MHz using the following features: Two push buttons (SW0 and SW1 only SW0 is used) Two LEDs (LED0 and 1 only LED0 is used) WM8904 codec (on board) The program takes up to approximately 1% (18 KB) of the ATSAME70Q21B microcontroller’s program space The 16-bit configuration uses 30% (115 KB) of the RAM (with 15K of that used by the three audio buffers) No heap is used The architecture is the same as for the SAM E70 Ultra board configurations; however only the SSC is available The same application code is used without change between the seven projects The PIC32 or SAM microcontroller (MCU) runs the application code and communicates with the AK4954 or WM8904 codec via an I 2 C interface The audio interface between the microcontroller and the codec use the I 2 S interface Audio is configured as 16-bit 48 000 samples/second I 2 S format (16-bit 48 kHz is the standard rate used for DVD audio An alternate that could be used is 44 100 samples/second This is the same sample rate used for CD's The sample rate is configurable in the MHC ) The Master Clock (MCLK) signal used by the codec is generated by the Peripheral Clock section of the microcontroller and is fixed at 12 MHz The button and LED are interfaced using GPIO pins There is no screen As with any MPLAB Harmony application the SYS_Initialize function which is located in the initialization c source file makes calls to initialize various subsystems as needed such as the clock ports board support package (BSP) codec I2S I2C DMA timers and interrupts The codec driver and the application state machines are all updated through calls located in the SYS_Tasks function in the tasks c file The application code is contained in the several source files The application’s state machine (APP_Tasks) is contained in app c It first initializes the application which includes APP_Tasks then periodically calls APP_Button_Tasks to process any pending button presses Then the application state machine inside APP_Tasks is given control which first gets a handle to a timer driver instance and sets up a periodic (alarm) callback In the next state it gets a handle to the codec driver by calling the DRV_CODEC_Open function with a mode of DRV_IO_INTENT_WRITE and sets up the volume The application state machine then registers an event handler APP_CODEC_BufferEventHandler as a callback with the codec driver (which in turn is called by the DMA driver) Two buffers are used for generating a sine wave in a ping-pong fashion Initially values for the first buffer are calculated and then the buffer is handed off to the DMA using a DRV_CODEC_BufferAddWrite While the DMA is transferring data to the SSC or I2SC/I2S peripheral causing the tone to sent to the codec over I 2 S the program calculates the values for the next cycle (In the current version of the program this is always the same unless the frequency is changed manually ) Then when the DMA callback Audio_Codec_BufferEventHandler is called the second buffer is handed off and the first buffer re-initialized back and forth A table called samples contains the number of samples for each frequency that correspond to one cycle of audio (e g 48 for 48000 samples/sec and 1 kHz tone) This is divided into the MAX_AUDIO_NUM_SAMPLES value (maximum number of elements in the tone) to provide the number of cycles of tone to be generated to fill the table Another table (appData numSamples1 or 2) is then filled in with the number of samples for each cycle to be generated Note: the samples table will need to be modified if changing the sample rate to something other than 48000 samples/second This table with the number of samples per cycle to be generated is then passed to the function APP_TONE_LOOKUP_TABLE_Initialize along with which buffer to work with (1 or 2) and the sample rate The 16-bit value for each sample is calculated based on the relative distance (angle) from 0 based in turn on the current sample number and total number of samples for one cycle First the angle is calculated in radians: double radians = (M_PI*(double)(360 0/(double)currNumSamples)*(double)i)/180 0; Then the sample value is calculated using the sine function: lookupTable leftData = (int16_t)(0x7FFF*sin(radians)); If the number of samples divides into the sample rate evenly then only 1/4 (90°) of the samples are calculated and the remainder is filled in by reflection Otherwise each sample is calculated individually Before returning the size of the buffer is calculated based on the number of samples filled in ",
							" Demonstration Features Calculation of a sine wave based on the number of samples and sample rate using the sin function with reflection if possible Uses the Codec Driver Library to write audio samples to the AK4954 or WM8904 At a lower level uses the I2S Driver Library between the codec library and the chosen peripheral (SSC or I2SC or I2S) to send the audio to the codec Use of ping-pong buffers and DMA Use of two timers: one as a periodic 1 ms timer for the application for button debouncing and a second used by the Codec Driver (see Timer Driver Library) ",
							" Tools Setup Differences For the project using the PIC32MZ the I2S interface and the AK4954 as a Slave (the I2S peripheral generates the I 2 S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP Select the appropriate processor (PIC32MZ2048EFM144) Click Finish In the MHC under Available Components select the PIC32 MZ EF Curiosity 2 0 Under Audio Templates double-click on AK4954 Codec Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one You should end up with a project graph that looks like this after rearranging the boxes: Click on the I2S Peripheral In the Configurations Options under 32/16-Bit Communication Select bits select (AUDEN=1) 24-bit data 32-bit FIFO 32-bit Channel/64-bit Frame Change Master Clock Enable bit to REFCLK Set the Frame Select Pin to C2 for the Curiosity 2 0 board The configuration should look like this: Click on the I2C1 peripheral Tick the checkbox for the Include Force Write I2C Function: Under Tools click on Clock Configuration In the Clock Diagram: Change the Primary Oscillator frequency to 12 000 000 Hz and select HS under POSCMOD Change the FPLLRNG to 8-16 MHz and FPLLMULT to MUL_33 In the Reference CLock section check the ON and OE checkboxes and set ROTRIM1 to 29 and RODIV1 to 8 This should give a REFCLKO1 output of 12 288 000 Hz which is 256 times the 48 KHz sample rate You should end up with a clock diagram like this: For projects using the E54 the I2S interface and the WM8904 as a Master (the WM8904 codec generates the I 2 S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP Select the appropriate processor (ATSAME54P20A) Click Finish In the MHC under Available Components select the BSP SAM E54 Curiosity Ultra Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions Click on the WM8904 Codec component ( not the WM8904 Driver) Answer Yes to all questions except for the one regarding FreeRTOS; answer Yes or No to that one depending on whether you will be using FreeRTOS or not You should end up with a project graph that looks like this after rearranging the boxes: Click on the WM8904 Driver In the Configurations Options under Audio Data Format change it to 32-bit I2S Set the desired Sample Rate if different from the default (48 000) under Sampling Rate In the Clock Diagram: Enable the Crystal Oscillator change it frequency to 12 000 000 Hz and select CRYSTAL Uncheck the Fractional Digital Phase Locked Loop enable (FDPLL 0) In the CLK Generator 0 box change the input to DFLL for an output of 48 MHz In the CLK Generator 1 box change the input to XOSC0 with a divider of 1 for an output of 12 MHz In the GCLK Generator uncheck the selection for GCLK 2 and then select the GCLK 3 tab Choose the DFLL as the input with a divide by 4 for an output of 12 MHz You should end up with a clock diagram like this: For projects using the E70 the SSC interface and the AK4954 as a Slave (the SAM E70 generates the I 2 S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP Select the appropriate processor (ATSAME70Q21B) Click Finish In the MHC under Available Components select the BSP SAM E70 Xplained Ultra Under Audio Templates double-click on AK4954 Codec Answer Yes to all questions Click on the AK4954 Codec component ( not the AK4954 Driver) In the Configuration Options under AK4954 Interface select I2SC instead of SSC Answer Yes to all questions except for the one regarding FreeRTOS; answer Yes or No to that one depending on whether you will be using FreeRTOS or not You should end up with a project graph that looks like this after rearranging the boxes: Click on the AK4954 Driver In the Configurations Options under Usage Mode change Master to Slave Set the desired Sample Rate if different from the default (48 000) under Sampling Rate In the Clock Diagram set MOSCEL to Main Crystal check the Bypass checkbox and uncheck the RC Crystal Oscillator and Main Crystal Oscillator boxes to make use of the 12 MHz external oscillator: Still in the Clock Diagram enable the PLLA Clock Leave the divider at 1 (12 MHz) and change the multiplier to 41 for an output of 492 MHz In the Master Clock Controller select the source (CSS) as PLLACK (492 MHz) all all three dividers as divide by 2 to generate a Processor Clock of 246 MHz and a Master Clock of 123 MHz In the Programmable Clock Controller section select the PCK2 tab select the source (CSS) as PLLACK (492 MHz) the divider of 40 for a PCK2 output of 12 300 000 Hz Then check the SSC checkbox in the Peripheral Clock Controller section For projects using the E70 or V71 the SSC interface and the WM8904 as a Master (the WM8904 codec generates the I 2 S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP used Select the appropriate processor (ATSAME70Q21B or ATSAMV71Q21B) depending on your board Click Finish In the MHC under Available Components select the appropriate BSP (SAM E70 Xplained Ultra or SAM V71 Xplained Ultra) Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions except for the one regarding FreeRTOS; answer Yes or No to that one depending on whether you will be using FreeRTOS or not You should end up with a project graph that looks like this after rearranging the boxes assuming a non-FreeRTOS project: Click on the WM8904 Driver In the Configurations Options set the desired Sample Rate if different from the default (48 000) under Sampling Rate If using the SAM E70 Xplained Ultra board in the Clock Diagram set MOSCEL to Main Crystal check the Bypass checkbox and uncheck the RC Crystal Oscillator and Main Crystal Oscillator boxes to make use of the 12 MHz external oscillator: If using the ATSAMV71Q21B in the Clock Diagram set MOSCEL to Main Crystal uncheck the Bypass checkbox and RC Crystal Oscillator checkbox and check the Main Crystal Oscillator box Also in the Clock Diagram in the PCK2 tab of the Programmable Clock Controller section check the On checkbox and set CSS to MAINCLK (12 MHz) Then check the SSC checkbox in the Peripheral Clock Controller section It is also possible to change the audio format from 16 to 32-bits and from I2S to Left Justified (SSC only) These changes need to be done in the MHC in both the WM8904 and SSC/I2SC Peripherals In the current application code (app h) a #define is also set to the current width If using FreeRTOS in the code you will need to move the call to DRV_WM8904_Tasks(sysObj drvwm8904Codec0); from the SYS_Tasks function in src/config/ config_name /tasks c to inside the while(1) loop of _APP_Tasks (just before the call to APP_Tasks) For projects using the E70 the I2SC interface and the WM8904 as a Slave (the SAM E70 generates the I 2 S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP Select the appropriate processor (ATSAME70Q21B) (The WM8904 on the SAM V71 Xplained Ultra cannot be used with I2SC ) Click Finish In the MHC under Available Components select the BSP SAM E70 Xplained Ultra Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions Click on the WM8904 Codec component ( not the WM8904 Driver) In the Configuration Options under WM8904 Interface select I2SC instead of SSC Answer Yes to all questions except for the one regarding FreeRTOS; answer Yes or No to that one depending on whether you will be using FreeRTOS or not You should end up with a project graph that looks like this after rearranging the boxes: Click on the WM8904 Driver In the Configurations Options under Usage Mode change Master to Slave Set the desired Sample Rate if different from the default (48 000) under Sampling Rate If using the SAM E70 Xplained Ultra board in the Clock Diagram set MOSCEL to Main Crystal check the Bypass checkbox and uncheck the RC Crystal Oscillator and Main Crystal Oscillator boxes to make use of the 12 MHz external oscillator: Also in the Clock Diagram in the PCK2 tab of the Programmable Clock Controller section check the On checkbox and set CSS to MAINCLK (12 MHz) The following tables show suggested settings for various sample rates in the Clock Diagram when using the I2SC Peripheral in Master mode Make sure PLLA Clock checkbox is checked and fill in the values for the PLLA Multiplier and Divider boxes Select the I2S1 tab under Generic Clock Controller set GCLKCSS to PLLACK fill in the Divider value as shown and check the checkbox next to it The values in the first table give the lowest error rate but have varying PLLACK values so it is best to use the UPPCLKDIV selection for CSS under Master Clock Controller for a Processor Clock of 240 MHz Desired Sample Rate PLLA Multipler PLLA Divider PLLACK I2SC Generic Clock Divider Calculated Sample Rate Error 8000 2 43 258 MHz 126 7998 -0 025% 16000 2 43 258 MHz 63 15997 -0 0187% 44100 1 16 192 MHz 17 41117 0 0385% 48000 2 43 258 MHz 21 47991 -0 0187% 96000 3 43 172 MHz 7 95982 -0 0187% The values in the second table have somewhat higher error rates but use a PLLACK value of 294 MHz which is suitable to be used as a Processor Clock (using the PLLACK selection for CSS) which is closer to the maximum of 300 MHz Desired Sample Rate PLLA Multipler PLLA Divider PLLACK I2SC Generic Clock Divider Calculated Sample Rate Error 8000 2 49 294 MHz 144 7975 -0 3125% 16000 2 49 294 MHz 72 15950 -0 3125% 44100 2 49 294 MHz 26 41170 0 1587% 48000 2 49 294 MHz 24 47851 -0 3104% 96000 3 49 294 MHz 12 95703 -0 3094% It is also possible to change the audio format from 16 to 32-bits This changes need to be done in the MHC in both the WM8904 Driver and I2SC Peripheral In the current application code (app h) a #define is also set to the current width If using FreeRTOS in the code you will need to move the call to DRV_WM8904_Tasks(sysObj drvwm8904Codec0); from the SYS_Tasks function in src/config/ config_name /tasks c to inside the while(1) loop of _APP_Tasks (just before the call to APP_Tasks) ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/audio_tone To build this project you must open the audio/apps/audio_tone/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration ",
							" MPLAB X IDE Project Configurations The following table lists and describes supported project configurations Project Name BSP Used Description audio_tone_ pic32mz_ef_c2_ ak4954 pic32mz_ef_curiosity_v2 This demonstration runs on the PIC32MZ2048EFM144 processor on the PIC32 MZ EF Curiosity 2 0 board and the AK4954 Audio Codec Daughter Board The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the I2S PLIB The AK4954 codec is configured as the slave and the I2S peripheral as the master audio_tone_ sam_e54_cult wm8904_ssc sam_e54_cult This demonstration runs on the ATSAME54P20A processor on the SAM E54 Curiosity Ultra board and the WM8904 Audio Codec Daughter Board The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the SSC PLIB The WM8904 codec is configured as the master and the SSC peripheral as the slave audio_tone_ sam_e54_cult wm8904_ssc_freertos sam_e54_cult This demonstration runs on the ATSAME54P20A processor on the SAM E54 Curiosity Ultra board and the WM8904 Audio Codec Daughter Board The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the SSC PLIB The WM8904 codec is configured as the master and the SSC peripheral as the slave This demonstration also uses FreeRTOS audio_tone_ sam_e70_xult_ ak4954_ssc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the AK4954 Audio Codec Daughter Board The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the SSC PLIB The AK4954 codec is configured as the slave and the SSC peripheral as the master audio_tone_ sam_e70_xult_ wm8904_ssc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the SSC PLIB The WM8904 codec is configured as the master and the SSC peripheral as the slave audio_tone_ sam_e70_xult_ wm8904_ssc_freertos sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the SSC PLIB The WM8904 codec is configured as the master and the SSC peripheral as the slave This demonstration also uses FreeRTOS audio_tone_ sam_e70_xult _wm8904_i2sc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the I2SC PLIB The WM8904 codec is configured as the slave and the I2SC peripheral as the master audio_tone_ sam_v71_xult sam_v71_xult This demonstration runs on the ATSAMV71Q21B processor on the SAM V71 Xplained Ultra board along with the on-board WM8904 codec The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the SSC PLIB The WM8904 codec is configured as the master and the SSC peripheral as the slave ",
							" Configuring the Hardware This section describes how to configure the supported hardware Description Using the PIC32 MZ EF Curiosity 2 0 board and the AK4954 Audio Codec Daughter Board and I2S PLIB The AK4954 daughter board is plugged into the set of X32 connectors on the right side of the board (X32 HEADER 2)  Note: The PIC32 MZ EF Curiosity 2 0 does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 Using the SAM E54 Curiosity Ultra board and the WM8904 Audio Codec Daughter Board and I2S PLIB All jumpers on the WM8904 should be toward the front: In addition make sure the J401 jumper (CLK SELECT) is set for the PA17 pin:  Note: The SAM E54 Curiosity Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 Using the SAM E70 Xplained Ultra board and the AK4954 Audio Codec Daughter Board and SSC PLIB No special configuration needed  Note: The SAM E70 Xplained Ultra board does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board and SSC PLIB All jumpers on the WM8904 should be toward the front:  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board and I2SC PLIB All jumpers on the WM8904 should be toward the back:  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 Using the SAM V71 Xplained Ultra board with on-board WM8904 with SSC PLIB No special configuration needed ",
							" Running the Demonstration This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues All configurations: Continuous sine tones of four frequencies can be generated Tables 1-2 provides a summary of the button actions that can used to control the volume and frequency Compile the program using MPLAB X and program the target device using the EDBG interface While compiling select the appropriate MPLAB X IDE project Refer to Building the Application for details Connect headphones to the HP OUT jack of the AK4954 or WM8904 Audio Codec Daughter Board (see Figures 1-2 ) or the HEADPHONE jack of the SAM V71 Xplained Ultra board The tone can be quite loud especially when using a pair of headphones The lowest-numbered pushbutton (SW0 or SW1) and LED are used as the user interface to control the program as shown in Tables 1-3 below depending on the board used Initially the program will be in volume-setting mode (LED off) at a medium volume setting Pressing the pushbutton with the LED off will cycle through four volume settings (including mute) Pressing the pushbutton longer than one second will change to frequency-setting mode (LED on) Pressing the pushbutton with the LED on will cycle through four frequency settings -- 250 Hz 500 Hz 1 kHz and 2 kHz Pressing the pushbutton longer than one second again will switch back to volume-setting mode again (LED off) ",
							" Figure 1: AK4954 Audio Codec Daughter Board on PIC32 MZ EF Curiosity 2 0 Board ",
							" Figure 2: WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board ",
							" Control Descriptions ",
							" Table 1: Button Controls for PIC32 MZ EF Curiosity 2 0 board SAM E54 Curiosity Ultra board and SAM E70 Xplained Ultra board (On some E70 boards SW0/LED0 are the lowest numbered pushbutton and LED so use Table 3 instead ) Control Description SW1 short press If LED1 is off SW1 cycles through four volume levels (one muted) If LED1 is on SW1 cycles through four frequencies of sine tone SW1 long press ( 1 second) Alternates between modes (LED1 on or off) ",
							" Table 2: Button Controls for SAM V71 Xplained Ultra board Control Description SW0 short press If LED0 is off SW0 cycles through four volume levels (one muted) If LED0 is on SW0 cycles through four frequencies of sine tone SW0 long press ( 1 second) Alternates between modes (LED0 on or off) ",
							" audio_tone_linkeddma This topic provides instructions and information about the MPLAB Harmony 3 Audio Tone using Linked DMA demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description In this demonstration application the Codec Driver sets up the WM8904 Codec The demonstration sends out generated audio waveforms (sine tone) using linked DMA channels with volume and frequency modifiable through the on-board push button Success is indicated by an audible output corresponding to displayed parameters The sine tone is one of four frequencies: 250 Hz 500 Hz 1 kHz and 2 kHz sent by default at 48 000 samples/second which is modifiable in the the MHC as described below To know more about the MPLAB Harmony Codec Drivers configuring the Codec Drivers and the APIs provided by the Codec Drivers refer to Codec Driver Libraries ",
							" Architecture The two projects run on the SAM E70 Xplained Ultra Board which contains a ATSAME70Q21B microcontroller with 2 MB of Flash memory and 384 KB of RAM running at 300 MHz using the following features: One push button (SW1) Two LEDs (LED1 and 2) WM8904 Codec Daughter Board mounted on a X32 socket The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 The program takes up to approximately 1% (17 KB) of the ATSAME70Q21B microcontroller’s program space The 16-bit configuration uses 2% (6 KB) of the RAM No heap is used The following figure illustrates the application architecture for the two SAM E70 Xplained Ultra configurations: Depending on the project either the SSC (Synchronous Serial Controller) or I2SC (Inter-IC Sound Controller) is used with the WM8904 codec selected by a strapping option on the WM8904 daughterboard When using the SSC interface the WM8904 is configured in master mode meaning it generates the I 2 S clocks (LRCLK and BCLK) and the SSC peripheral is configured as a slave When using the I2SC interface the WM8904 is configured in slave mode and the SSC peripheral is a master and generates the I2SC clocks The other two possibilities (SSC as master and WM8904 as slave or I2SC as slave and WM8904 as master) are possible but not discussed The same application code is used without change between the two projects The SAM E70 microcontroller (MCU) runs the application code and communicates with the WM8904 codec via an I 2 C interface The audio interface between the SAM E70 and the WM8904 codec use the I 2 S interface Audio is configured as 16-bit 48 000 samples/second I 2 S format (16-bit 48 kHz is the standard rate used for DVD audio An alternate that could be used is 44 100 samples/second This is the same sample rate used for CD's The sample rate is configurable in the MHC ) The Master Clock (MCLK) signal used by the codec is generated by the Peripheral Clock section of the SAM E70 and is fixed at 12 MHz The button and LEDs are interfaced using GPIO pins There is no screen As with any MPLAB Harmony application the SYS_Initialize function which is located in the initialization c source file makes calls to initialize various subsystems as needed such as the clock ports board support package (BSP) WM8904 codec I2S I2C DMA timers and interrupts The codec driver and the application state machines are all updated through calls located in the SYS_Tasks function in the tasks c file The application code is contained in the several source files The application’s state machine (APP_Tasks) is contained in app c It first initializes the application which includes APP_Tasks then periodically calls APP_Button_Tasks to process any pending button presses Then the application state machine inside APP_Tasks is given control which first gets a handle to a timer driver instance and sets up a periodic (alarm) callback In the next state it gets a handle to the codec driver by calling the DRV_CODEC_Open function with a mode of DRV_IO_INTENT_WRITE and sets up the volume The application state machine then registers an event handler APP_CODEC_BufferEventHandler as a callback with the codec driver (which in turn is called by the DMA driver) Two buffers are used for generating a sine wave Each contains the data for one cycle of audio One is currently output on a repeated basis and the second is filled in as necessary when the frequency changes Then it is designated as the output buffer Initially values for both buffers are calculated in advance Two calls to the function DRV_I2S_InitWriteLinkedListTransfer are made each passing the address of one buffer The buffers are each linked back to themselves such that when one is done it starts over again A call to DRV_I2S_StartWriteLinkedListTransfer is made which starts the DMA sending data using data from the first buffer to the codec Only when the frequency is changed due to a button press does the second buffer come into play In that case new values are calculated for the second buffer (while the first buffer continues to be used for output) When the second buffer has been filled in a call is made to DRV_I2S_WriteNextLinkedListTransfer which transfers control to the second buffer after the first buffer finishes The way the pointers are set up it will then repeat on itself until another frequency change is made and after which control will revert back to the first buffer A table called samples contains the number of samples for each frequency that correspond to one cycle of audio (e g 48 for 48000 samples/sec and a 1 kHz tone) Note: the samples table will need to be modified if changing the sample rate to something other than 48000 samples/second This value with the number of samples to be generated is then passed to the function APP_TONE_LOOKUP_TABLE_Initialize along with which buffer to work with (1 or 2) and the sample rate The 16-bit value for each sample is calculated based on the relative distance (angle) from 0 based in turn on the current sample number and total number of samples for one cycle First the angle is calculated in radians: double radians = (M_PI*(double)(360 0/(double)currNumSamples)*(double)i)/180 0; Then the sample value is calculated using the sine function: lookupTable leftData = (int16_t)(0x7FFF*sin(radians)); If the number of samples divides into the sample rate evenly then only 1/4 (90°) of the samples are calculated and the remainder is filled in by reflection Otherwise each sample is calculated individually Before returning the size of the buffer is calculated based on the number of samples filled in ",
							" Demonstration Features Calculation of a sine wave based on the number of samples and sample rate using the sin function Uses the Codec Driver Library to write audio samples to the WM8904 At a lower level uses the I2S Driver Library between the codec library and the chosen peripheral (SSC or I2SC) to send the audio to the codec Use of a alternate buffers (one active one standby) and linked DMA Use of two timers: one as a periodic 1 ms timer for the application for button debouncing and a second used by the Codec Driver (see Timer Driver Library) ",
							" Tools Setup Differences For projects using the SSC interface and the WM8904 as a Master (the WM8904 codec generates the I 2 S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name the same based on the BSP used Select the appropriate processor (ATSAME70Q21B) In the MHC under Available Components select the appropriate BSP (SAM E70 Xplained Ultra) Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one You should end up with a project graph that looks like this after rearranging the boxes: Click on the WM8904 Driver In the Configurations Options set the desired Sample Rate if different from the default (48 000) under Sampling Rate If using the SAM E70 Xplained Ultra board in the Clock Diagram set MOSCEL to Main Crystal check the Bypass checkbox and uncheck the RC Crystal Oscillator and Main Crystal Oscillator boxes to make use of the 12 MHz external oscillator: In the Clock Diagram in the PCK2 tab of the Programmable Clock Controller section check the On checkbox and set CSS to MAINCLK (12 MHz) Then check the SSC checkbox in the Peripheral Clock Controller section It is also possible to change the audio format from 16 to 32-bits and from I2S to Left Justified (SSC only) These changes need to be done in the MHC in both the WM8904 and SSC/I2SC Peripherals In the current application code (app h) a #define is also set to the current width For projects using the I2SC interface and the WM8904 as a Slave (the SAM E70 generates the I 2 S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name the based on the BSP Select the appropriate processor (ATSAME70Q21B) Click Finish In the MHC under Available Components select the BSP SAM E70 Xplained Ultra Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions Click on the WM8904 Codec component ( not the WM8904 Driver) In the Configuration Options under WM8904 Interface select I2SC instead of SSC Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one You should end up with a project graph that looks like this after rearranging the boxes: Click on the WM8904 Driver In the Configurations Options under Usage Mode change Master to Slave Set the desired Sample Rate if different from the default (48 000) under Sampling Rate If using the SAM E70 Xplained Ultra board in the Clock Diagram set MOSCEL to Main Crystal check the Bypass checkbox and uncheck the RC Crystal Oscillator and Main Crystal Oscillator boxes to make use of the 12 MHz external oscillator: Also in the Clock Diagram in the PCK2 tab of the Programmable Clock Controller section check the On checkbox and set CSS to MAINCLK (12 MHz) The following tables show suggested settings for various sample rates in the Clock Diagram when using the I2SC Peripheral in Master mode Make sure PLLA Clock checkbox is checked and fill in the values for the PLLA Multiplier and Divider boxes Select the I2S1 tab under Generic Clock Controller set GCLKCSS to PLLACK fill in the Divider value as shown and check the checkbox next to it The values in the first table give the lowest error rate but have varying PLLACK values so it is best to use the UPPCLKDIV selection for CSS under Master Clock Controller for a Processor Clock of 240 MHz Desired Sample Rate PLLA Multipler PLLA Divider PLLACK I2SC Generic Clock Divider Calculated Sample Rate Error 8000 2 43 258 MHz 126 7998 -0 025% 16000 2 43 258 MHz 63 15997 -0 0187% 44100 1 16 192 MHz 17 41117 0 0385% 48000 2 43 258 MHz 21 47991 -0 0187% 96000 3 43 172 MHz 7 95982 -0 0187% The values in the second table have somewhat higher error rates but use a PLLACK value of 294 MHz which is suitable to be used as a Processor Clock (using the PLLACK selection for CSS) which is closer to the maximum of 300 MHz Desired Sample Rate PLLA Multipler PLLA Divider PLLACK I2SC Generic Clock Divider Calculated Sample Rate Error 8000 2 49 294 MHz 144 7975 -0 3125% 16000 2 49 294 MHz 72 15950 -0 3125% 44100 2 49 294 MHz 26 41170 0 1587% 48000 2 49 294 MHz 24 47851 -0 3104% 96000 3 49 294 MHz 12 95703 -0 3094% It is also possible to change the audio format from 16 to 32-bits This changes need to be done in the MHC in both the WM8904 Driver and SSC Peripheral In the current application code (app h) a #define is also set to the current width ",
							" Bulding the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/audio_tone_linkeddma To build this project you must open the audio/apps/audio/audio_tone_linkeddma/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration ",
							" MPLAB X IDE Project Configurations The following table lists and describes supported configurations Project Name BSP Used Description audio_tone_ld_sam_e70_xult_wm8904_ssc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board using linked DMA The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the SSC PLIB The WM8904 codec is configured as the master and the SSC peripheral as the slave audio_tone_ld_sam_e70_xult_wm8904_i2sc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board using linked DMA The project configuration is for a sine tone with 16-bit data width 48000 Hz sampling frequency and I 2 S audio protocol using the I2SC PLIB The WM8904 codec is configured as the slave and the I2SC peripheral as the master ",
							" Configuring the Hardware This section describes how to configure the supported hardware Description Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board with the SSC PLIB: All jumpers on the WM8904 should be toward the front  Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board with the I2SC PLIB: All jumpers on the WM8904 should be toward the back   Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 ",
							" Running the Demonstration This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues All configurations: Continuous sine tones of four frequencies can be generated Table 1 provides a summary of the button actions that can used to control the volume and frequency Compile and program the target device While compiling select the appropriate MPLAB X IDE project based Refer to Building the Applications for details Connect headphones to the HP OUT jack of the WM8904 Audio Codec Daughter Board (see Figure 1 ) The tone can be quite loud especially when using a pair of headphones Initially the program will be in volume-setting mode (LED1 off) at a medium volume setting Pressing SW1 with LED1 off will cycle through four volume settings (including mute) Pressing SW1 longer than one second will change to frequency-setting mode (LED1 on) Pressing SW1 with LED1 on will cycle through four frequency settings -- 250 Hz 500 Hz 1 kHz and 2 kHz Pressing SW1 longer than one second again will switch back to volume-setting mode again (LED1 off) Figure 1: WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board ",
							" Control Descriptions ",
							" Table 1: Button Controls for SAM E70 Xplained Ultra board Control Description SW1 short press If LED1 if off SW1 cycles through four volume levels (one muted) If LED1 is on SW1 cycles through four frequencies of sine tone SW1 long press ( 1 second) Alternates between modes (LED1 on or off) ",
							" microphone_loopback This readme file provides instructions and information about the MPLAB Harmony 3 Microphone Loopback demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description In this demonstration application the AK4954 or WM8904 Codec Driver sets up the codec so it can receive audio data through the microphone input on the daughter board and sends this same audio data back out through the on-board headphones after a delay The volume and delay are configurable using the on-board pushbutton The audio by default is sampled at 48 000 samples per second which is modifiable in the MHC as described below To know more about the MPLAB Harmony Codec Drivers configuring the Codec Drivers and the APIs provided by the Codec Drivers refer to Codec Driver Libraries ",
							" Architecture There are seven different projects packaged in this application PIC32 MZ EF Curiosity 2 0 Project: One project runs on the PIC32 MZ EF Curiosity 2 0 board using the PIC32MZ2048EFM144 microcontroller with 2 MB of Flash memory and 512 KB of RAM running at 198 MHz The PIC32 MZ EF Curiosity 2 0 board includes the following features: Four push buttons (SW1-SW4 only SW1 is used) Four LEDs (LED1-LED4 only LED1 is used) AK4954 Codec Daughter Board mounted on X32 HEADER 2 socket The PIC32 MZ EF Curiosity 2 0 board does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 The program takes up to approximately 2% (33 KB) of the PIC32MZ2048EFM144 microcontroller’s program space and 55% (283 KB) of the RAM No heap is used The following figure illustrates the application architecture for the PIC32 MZ EF Curiosity 2 0 configuration: SAM E54 Curiosity Ultra Projects: Two projects run on the SAM E54 Curiosity Ultra Board which contains a ATSAME54P20A microcontroller with 1 MB of Flash memory and 256 KB of RAM running at 48 MHz using the following features: Two push buttons (SW1 and SW2 only SW1is used) Two LEDs (LED1 and 2 only LED1 is used) WM8904 Codec Daughter Board mounted on a X32 socket The SAM E54 Curiosity Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 The non-RTOS version of the program takes up to approximately 2% (23 KB) of the ATSAME54P20A microcontroller’s program space The 16-bit configuration uses 45% (115 KB) of the RAM No heap is used For the FreeRTOS project the program takes up to approximately 3% (31 KB) of the ATSAME54P20A microcontroller’s program space and the 16-bit configuration uses 60% (155 KB) of the RAM No heap is used The following figure illustrates the application architecture for the two SAM E54 Xplained Ultra configurations (RTOS not shown): The I2S (Inter-IC Sound Controller) is used with the WM8904 codec The WM8904 is configured in master mode meaning it generates the I2S clocks (LRCLK and BCLK) and the I2S peripheral is configured as a slave SAM E70 Xplained Ultra Projects: Three projects run on the SAM E70 Xplained Ultra Board without a display which contains a ATSAME70Q21B microcontroller with 2 MB of Flash memory and 384 KB of RAM running at 300 MHz using the following features: One push button (SW1 may be labeled as SW0 on some boards) Two LEDs (LED1 and 2 only LED1 is used) AK4954 or WM8904 Codec Daughter Board mounted on a X32 socket The SAM E70 Xplained Ultra board does not include the AK4954 or WM8904 Audio Codec daughterboards which are sold separately on microchipDIRECT as part numbers AC324954 and AC328904 respectively The two non-RTOS versions of the program take up to approximately 1% (18 KB) of the ATSAME70Q21B microcontroller’s program space The 16-bit configuration uses 30% (115 KB) of the RAM No heap is used For the FreeRTOS project the program takes up to approximately 1% (22 KB) of the ATSAME70Q21B microcontroller’s program space and the 16-bit configuration uses 41% (155 KB) of the RAM No heap is used The following figure illustrates the application architecture for the three SAM E70 Xplained Ultra configurations using the WM8904 (RTOS not shown) The AK4954 version is the same with the substitution of the AK4954 Driver and Codec blocks The I2SC (Inter-IC Sound Controller) is used with the WM8904 codec selected by a strapping option on the WM8904 daughterboard The WM8904 is configured in slave mode and the I2SC peripheral is a master and generates the I2SC (LRCLK and BCLK) clocks Other possible configurations are possible but not discussed SAM V71 Xplained Ultra Project: This project runs on the SAM V71 Xplained Ultra Board which contains a ATSAMV71Q21B microcontroller with 2 MB of Flash memory and 384 KB of RAM running at 300 MHz using the following features: Two push buttons (SW0 and 1 only SW0 used) Two LEDs (LED0 and 1 only LED0 used) WM8904 codec (on board) The program takes up to approximately 1% (13 KB) of the ATSAME70Q21B microcontroller’s program space The 16-bit configuration uses 74% (284 KB) of the RAM No heap is used The architecture is the same as for the first bare-metal SAM E70 Ultra board configuration; however only it uses the SSC peripheral instead of the I2SC The WM8904 is configured in master mode and generates the I2SC (LRCLK and BCLK) clocks and the I2SC peripheral is configured as a slave Except for the user interface the same application code is used without change between the various projects The PIC32 or SAM microcontroller (MCU) runs the application code and communicates with the AK4954 or WM8904 codec via an I2C interface The audio interface between the microcontroller and the WM8904 codec use the I2S interface Audio is configured as 16-bit 48 000 or 16 000 samples per second I2S format (16-bit 48 kHz is the standard rate used for DVD audio 16 kHz still provides excellent voice quality audio Another alternative that could be used is 44 100 samples per second This is the same sample rate used for CD's The Master Clock (MCLK) signal used by the codec is generated by the Generic Clock section of the E54 or the Peripheral Clock section of the SAM E70/V71 and is either 12 MHz (when the codec is configured as a master) or close to 12 288 000 (when the codec is configured as a slave this frequency being 256 times the sample rate) The button and LEDs are interfaced using GPIO pins As with any MPLAB Harmony application the SYS_Initialize function which is located in the initialization c source file makes calls to initialize various subsystems as needed such as the clock ports board support package (BSP) screen (if applicable) AK4954 or WM8904 codec I2S I2C DMA timers and interrupts The codec driver and the application state machines are all updated through calls located in the SYS_Tasks function in the tasks c file When the application’s state machine (APP_Tasks) contained in app c is given control it first gets a handle to a timer driver instance and sets up a periodic (alarm) callback In the next state it gets a handle to the codec driver by calling the DRV_CODEC_Open function with a mode of DRV_IO_INTENT_WRITE and sets up the volume The application state machine then registers an event handler APP_CODEC_BufferEventHandler as a callback with the codec driver (which in turn is called by the DMA driver) A total of MAX_BUFFERS (#defined as 150) buffers are allocated each able to hold 10 ms of audio (480 samples at 48 000 samples/second) which is enough for a 1 5 second delay ) Two indicies appData rxBufferIdx and appData txBufferIdx are used to track the current buffers for both input and output Initially all buffers are zeroed out A call to DRV_CODEC_BufferAddWriteRead is made which writes out the data from the buffer pointed to by appData txBufferIdx (initially zero) while at the same time data is read from the codec into the buffer pointed to by appData rxBufferIdx On each callback from the DMA the buffer pointers are advanced wrapping around at the ends After the prescribed delay the audio from the first buffer filled in will be output If the button is held down for more than one second the mode changes and there is no delay while the volume is being adjusted Instead of a circular array of buffers the first two buffers are just toggled back and forth in a ping-pong fashion ",
							" Demonstration Features Uses the Codec Driver Library to input audio samples from the AK4954 or WM8904 codec and later write them back out to the codec At a lower level uses the I2S Driver Library between the codec library and the chosen peripheral (SSC or I2SC or I2S) to send the audio to the codec Using either an array of circular buffers to create an audio delay or two buffers in ping-pong fashion for no delay both using DMA Use of two timers: one as a periodic 1 ms timer for the application for button debouncing and a second used by the Codec Driver (see Timer Driver Library) For the version using the display use of the touch screen as a UI ",
							" Tools Setup Differences For the project using the PIC32MZ the I2S interface and the AK4954 as a Slave (the I2S peripheral generates the I2S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP Select the appropriate processor (PIC32MZ2048EFM144) Click Finish In the MHC under Available Components select the PIC32 MZ EF Curiosity 2 0 Under Audio Templates double-click on AK4954 Codec Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one You should end up with a project graph that looks like this after rearranging the boxes: Click on the I2S Peripheral In the Configurations Options under 32/16-Bit Communication Select bits select (AUDEN=1) 24-bit data 32-bit FIFO 32-bit Channel/64-bit Frame Change Master Clock Enable bit to REFCLK Set the Frame Select Pin to C2 for the Curiosity 2 0 board The configuration should look like this: Click on the I2C1 peripheral Tick the checkbox for the Include Force Write I2C Function: Under Tools click on Clock Configuration In the Clock Diagram: Change the Primary Oscillator frequency to 12 000 000 Hz and select HS under POSCMOD Change the FPLLRNG to 8-16 MHz and FPLLMULT to MUL_33 In the Reference CLock section check the ON and OE checkboxes and set ROTRIM1 to 29 and RODIV1 to 8 This should give a REFCLKO1 output of 12 288 000 Hz which is 256 times the 48 KHz sample rate You should end up with a clock diagram like this: For projects using the E54 the I2S interface and the WM8904 as a Master (the WM8904 codec generates the I2S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP Select the appropriate processor (ATSAME54P20A) Click Finish In the MHC under Available Components select the BSP SAM E54 Curiosity Ultra Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions Click on the WM8904 Codec component ( not the WM8904 Driver) Answer Yes to all questions except for the one regarding FreeRTOS; answer Yes or No to that one depending on whether you will be using FreeRTOS or not You should end up with a project graph that looks like this after rearranging the boxes: Click on the WM8904 Driver In the Configurations Options under Audio Data Format change it to 32-bit I2S Set the desired Sample Rate if different from the default (48 000) under Sampling Rate In the Clock Diagram: Set enable the Crystal Oscillator change it frequency to 12 000 000 Hz and select CRYSTAL Uncheck the Fractional Digital Phase Locked Loop enable (FDPLL 0) In the CLK Generator 0 box change the input to DFLL for an output of 48 MHz In the CLK Generator 1 box change the input to XOSC0 with a divider of 1 for an output of 12 MHz In the GCLK Generator uncheck the selection for GCLK 2 and then select the GCLK 3 tab Choose the DFLL as the input with a divide by 4 for an output of 12 MHz You should end up with a clock diagram like this: For projects using the E70 the SSC interface and the AK4954 as a Slave (the SAM E70 generates the I2S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP Select the appropriate processor (ATSAME70Q21B) Click Finish In the MHC under Available Components select the BSP SAM E70 Xplained Ultra Under Audio Templates double-click on AK4954 Codec Answer Yes to all questions Click on the AK4954 Codec component ( not the AK4954 Driver) In the Configuration Options under AK4954 Interface select I2SC instead of SSC Answer Yes to all questions except for the one regarding FreeRTOS; answer Yes or No to that one depending on whether you will be using FreeRTOS or not You should end up with a project graph that looks like this after rearranging the boxes: Click on the AK4954 Driver In the Configurations Options under Usage Mode change Master to Slave Set the desired Sample Rate if different from the default (48 000) under Sampling Rate In the Clock Diagram set MOSCEL to Main Crystal check the Bypass checkbox and uncheck the RC Crystal Oscillator and Main Crystal Oscillator boxes to make use of the 12 MHz external oscillator: Still in the Clock Diagram enable the PLLA Clock Leave the divider at 1 (12 MHz) and change the multiplier to 41 for an output of 492 MHz In the Master Clock Controller select the source (CSS) as PLLACK (492 MHz) all all three dividers as divide by 2 to generate a Processor Clock of 246 MHz and a Master Clock of 123 MHz In the Programmable Clock Controller section select the PCK2 tab select the source (CSS) as PLLACK (492 MHz) the divider of 40 for a PCK2 output of 12 300 000 Hz Then check the SSC checkbox in the Peripheral Clock Controller section For projects using the I2SC interface and the WM8904 as a Slave (the SAM E70 generates the I2S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP Select the appropriate processor (ATSAME70Q21B) (The WM8904 on the SAM V71 Xplained Ultra cannot be used with I2SC ) Click Finish In the the MHC under Available Components select the BSP SAM E70 Xplained Ultra Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions Click on the WM8904 Codec component ( not the WM8904 Driver) In the Configuration Options under WM8904 Interface select I2SC instead of SSC Answer Yes to all questions except for the one regarding FreeRTOS; answer Yes or No to that one depending on whether you will be using FreeRTOS or not You should end up with a project graph that looks like this after rearranging the boxes assuming a non-FreeRTOS project: Click on the WM8904 Driver In the Configurations Options under Usage Mode change Master to Slave Set the desired Sample Rate if different from the default (48 000) under Sampling Rate Select Enable Microphone Input and Enable Microphone Bias for elecret microphones if appropriate If using the SAM E70 Xplained Ultra board in the Clock Diagram set MOSCEL to Main Crystal check the Bypass checkbox and uncheck the RC Crystal Oscillator and Main Crystal Oscillator boxes to make use of the 12 MHz external oscillator: In the Clock Diagram in the PCK2 tab of the Programmable Clock Controller section check the On checkbox and set CSS to MAINCLK (12 MHz) The following tables show suggested settings for various sample rates in the Clock Diagram when using the I2SC Peripheral in Master mode Make sure PLLA Clock checkbox is checked and fill in the values for the PLLA Multiplier and Divider boxes Select the I2S1 tab under Generic Clock Controller set GCLKCSS to PLLACK fill in the Divider value as shown and check the checkbox next to it The values in the first table give the lowest error rate but have varying PLLACK values so it is best to use the UPPCLKDIV selection for CSS under Master Clock Controller for a Processor Clock of 240 MHz Desired Sample Rate PLLA Multipler PLLA Divider PLLACK I2SC Generic Clock Divider Calculated Sample Rate Error 8000 2 43 258 MHz 126 7998 -0 025% 16000 2 43 258 MHz 63 15997 -0 0187% 44100 1 16 192 MHz 17 41117 0 0385% 48000 2 43 258 MHz 21 47991 -0 0187% 96000 3 43 172 MHz 7 95982 -0 0187% The values in the second table have somewhat higher error rates but use a PLLACK value of 294 MHz which is suitable to be used as a Processor Clock (using the PLLACK selection for CSS) which is closer to the maximum of 300 MHz Desired Sample Rate PLLA Multipler PLLA Divider PLLACK I2SC Generic Clock Divider Calculated Sample Rate Error 8000 2 49 294 MHz 144 7975 -0 3125% 16000 2 49 294 MHz 72 15950 -0 3125% 44100 2 49 294 MHz 26 41170 0 1587% 48000 2 49 294 MHz 24 47851 -0 3104% 96000 3 49 294 MHz 12 95703 -0 3094% It is also possible to change the audio format from 16 to 32-bits This changes need to be done in the MHC in both the WM8904 Driver and SSC Peripheral In the current application code (app h) a #define is also set to the current width If using FreeRTOS in the code you will need to move the call to DRV_WM8904_Tasks(sysObj drvwm8904Codec0); from the SYS_Tasks function in src/config/ config_name /tasks c to inside the while(1) loop of _APP_Tasks (just before the call to APP_Tasks) For projects using the SSC interface and the WM8904 as a Master (the WM8904 codec generates the I2S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name same based on the BSP used Select the appropriate processor (e g ATSAMV71Q21B) depending on your board Click Finish In the MHC under Available Components select the appropriate BSP (e g SAM V71 Xplained Ultra) Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions except for the one regarding FreeRTOS; answer Yes or No to that one depending on whether you will be using FreeRTOS or not You should end up with a project graph that looks like this after rearranging the boxes assuming a non-FreeRTOS project: If using the SAM E70 Xplained Ultra board in the Clock Diagram in the Clock Diagram set MOSCEL to Main Crystal check the Bypass checkbox and uncheck the RC Crystal Oscillator and Main Crystal Oscillator boxes to make use of the 12 MHz external oscillator: If using the ATSAMV71Q21B in the Clock Diagram set MOSCEL to Main Crystal uncheck the Bypass checkbox and RC Crystal Oscillator checkbox and check the Main Crystal Oscillator box Also in the Clock Diagram in the PCK2 tab of the Programmable Clock Controller section check the On checkbox and set CSS to MAINCLK (12 MHz) Then check the SSC checkbox in the Peripheral Clock Controller section It is also possible to change the audio format from 16 to 32-bits and from I2S to Left Justified (SSC only) These changes need to be done in the MHC in both the WM8904 and SSC/I2SC Peripherals In the current application code (app h) a #define is also set to the current width If using FreeRTOS in the code you will need to move the call to DRV_WM8904_Tasks(sysObj drvwm8904Codec0); from the SYS_Tasks function in src/config/ config_name /tasks c to inside the while(1) loop of _APP_Tasks (just before the call to APP_Tasks) ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/audio_microphone_loopback To build this project you must open the audio/apps/audio/audio_microphone_loopback/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration ",
							" MPLAB X IDE Project Configurations The following table lists and describes supported configurations Project Name BSP Used Description mic_loopback_ pic32mz_ef_c2_ ak4954 pic32mz_ef_curiosity_v2 This demonstration runs on the PIC32MZ2048EFM144 processor on the PIC32 MZ EF Curiosity 2 0 board and the AK4954 Audio Codec Daughter Board The configuration is for a 16-bit data width 48000 Hz sampling frequency and I2S audio protocol using the I2S PLIB The AK4954 codec is configured as the slave and the I2S peripheral as the master mic_loopback_ sam_e54_cult_ wm8904_ssc sam_e54_cult This demonstration runs on the ATSAME54P20A processor on the SAM E54 Curiosity Ultra board and the WM8904 Audio Codec Daughter Board The configuration is for a 16-bit data width 48000 Hz sampling frequency and I2S audio protocol using the SSC PLIB The WM8904 codec is configured as the master and the SSC peripheral as the slave mic_loopback_ sam_e54_cult_ wm8904_ssc_freertos sam_e54_cult This demonstration runs on the ATSAME54P20A processor on the SAM E54 Curiosity Ultra board and the WM8904 Audio Codec Daughter Board The configuration is for a 16-bit data width 48000 Hz sampling frequency and I2S audio protocol using the SSC PLIB The WM8904 codec is configured as the master and the SSC peripheral as the slave This demonstration also uses FreeRTOS mic_loopback_ sam_e70_xult_ ak4954_ssc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the AK4954 Audio Codec Daughter Board The configuration is for a 16-bit data width 48000 Hz sampling frequency and I2S audio protocol using the SSC PLIB The AK4954 codec is configured as the slave and the SSC peripheral as the master mic_loopback_ sam_e70_xult _wm8904_i2sc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board The configuration is for a 16-bit data width 48000 Hz sampling frequency and I2S audio protocol using the I2SC PLIB The WM8904 codec is configured as the slave and the I2SC peripheral as the master mic_loopback_ sam_e70_xult_ wm8904_i2sc_freertos sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board The configuration is for a 16-bit data width 48000 Hz sampling frequency and I2S audio protocol using the I2SC PLIB The WM8904 codec is configured as the slave and the I2SC peripheral as the master This demonstration also uses FreeRTOS mic_loopback_ sam_v71_xult sam_v71_xult This demonstration runs on the ATSAMV71Q21B processor on the SAMV71 Xplained Ultra board along with the on-board WM8904 codec The configuration is for a 16-bit data width 48000 Hz sampling frequency and I2S audio protocol using the SSC PLIB The WM8904 codec is configured as the master and the SSC peripheral as the slave ",
							" Configuring the Hardware This section describes how to configure the supported hardware SAM V71 Xplained Ultra board and the WM8904 Audio Codec Daughter Board using the SSC PLIB No configuration is necessary Description Using the PIC32 MZ EF Curiosity 2 0 board and the AK4954 Audio Codec Daughter Board and I2S PLIB The AK4954 daughter board is plugged into the set of X32 connectors on the right side of the board (X32 HEADER 2)  Note: The PIC32 MZ EF Curiosity 2 0 does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 Using the SAM E54 Curiosity Ultra board and the WM8904 Audio Codec Daughter Board and the I2S PLIB All jumpers on the WM8904 should be toward the front: In addition make sure the J401 jumper (CLK SELECT) is set for the PA17 pin:  Note: The SAM E54 Curiosity Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 Using the SAM E70 Xplained Ultra board and the AK4954 Audio Codec Daughter Board and the SSC PLIB No special configuration needed  Note: The SAM E70 Xplained Ultra board does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board and the I2SC PLIB All jumpers on the WM8904 should be toward the back:  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 Using the SAM V71 Xplained Ultra board with on-board WM8904 with the SSC PLIB No special configuration needed ",
							" Running the Demonstration This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues Compile the program using MPLAB X and program the target device using the EDBG interface While compiling select the appropriate MPLAB X IDE project Refer to Building the Application for details Four different delays can be generated Tables 1-2 provides a summary of the button actions that can used to control the volume and delay amount Connect headphones to the HP OUT jack of the AK4954 or WM8904 Audio Codec Daughter Board (see Figures 1-2 ) or the HEADPHONE jack of the SAM V71 Xplained Ultra board If applicable connect a microphone to the MIC IN jack of the WM8904 Audio Codec Daughter Board or the MICROPHONE jack of the SAM V71 Xplained Ultra board (For the AK4954 the internal microphone contained on the daughterboard is used instead ) The lowest-numbered pushbutton (SW0 or SW1) and LED are used as the user interface to control the program as shown in Tables 1-3 below depending on the board used Initially the program will be in delay-setting mode (LED on) at a medium volume setting Pressing the pushbutton with the LED on will cycle through four delay settings Pressing the pushbutton longer than one second will change to volume-setting mode (LED off) Pressing the pushbutton with the LED off will cycle through four volume settings (including mute) There is never any delay when setting the volume Pressing the pushbutton longer than one second again will switch back to delay-setting mode again (LED on) ",
							" Control Descriptions ",
							" Figure 1: AK4954 Audio Codec Daughter Board on PIC32 MZ EF Curiosity 2 0 Board ",
							" Figure 2: WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board ",
							" Table 1: Button Controls for PIC32MZ Ef Curiosity 2 0 SAM E54 Curiosity Ultra board and SAM E70 Xplained Ultra board (On some E70 boards SW0/LED0 are the lowest numbered pushbutton and LED so use Table 3 instead ) Control Description SW1 short press If LED1 if off SW1 cycles through four volume levels (one muted) If LED1 is on SW1 cycles through four delays: ¼ second ½ second 1 second and 1½ seconds SW1 long press ( 1 second) Alternates between modes (LED1 on or off) ",
							" Table 2: Button Controls for SAM V71 Xplained Ultra board Control Description SW0 short press If LED0 if off SW0 cycles through four volume levels (one muted) If LED0 is on SW0 cycles through four delays: ¼ second ½ second 1 second and 1½ seconds SW0 long press ( 1 second) Alternates between modes (LED0 on or off) ",
							" universal_audio_decoders This topic provides instructions and information about the MPLAB Harmony 3 Universal Audio decoders demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description The Universal Audio Decoders application uses the MPLAB Harmony Decoder Library to decode music files on a USB thumb drive The application configures the development board to be in USB Host mode and supports the FAT32 file system When a mass storage device is connected to the development board the application begins to scan the root directory Once the scan is complete the first track in the list will be opened and played The fill buffer routine will read a chunk of data as an input to the decoder of the supported file format The decoder will decode the packet and send the first frame of audio data to the codec driver through I2S Driver and the output will be audible through the speakers The following block diagram depicts a representation of the application Button or touch controls provide typical VCR-like control over the playback such as play/pause rewind and next track The application currently supports ADPCM WAV MP3 and FLAC files Audio Format Decoder Location Sampling Rates (kHz) Description ADPCM audio/decoder 8 16 Adaptive Delta Pulse Code Modulation (ADPCM) is a sub-class of the Microsoft waveform ( wav) file format In this demonstration it only decodes ADPCM audio which has a WAV header The extension name for this format is pcm WAVE audio/decoder 8 through 96 The WAVE file format is the native file format used by Microsoft Windows for storing digital audio data MP3 helix_mp3 8 through 48 The MPEG 2 5 Layer 3 is a lossy digital compression formats for audio data The current version of the MP3 Library is an open-source based on the Helix MP3 decoder used in RealPlayer The version in MPLAB Harmony is v1 0 FLAC xiph_flac 8 through 48 FLAC stands for Free Lossless Audio Codec here lossless means that audio is compressed in FLAC without any loss in quality The current version of the FLAC Library is an open-source version based on the Xiph FLAC decoder The version in MPLAB Harmony is based on version 1 3 3 of the open source XIPH FLAC source ",
							" Architecture There are two different projects packaged in this application PIC32 MZ EF Curiosity 2 0 Project: One project runs on the PIC32 MZ EF Curiosity 2 0 board using the PIC32MZ2048EFM144 microcontroller with 2 MB of Flash memory and 512 KB of RAM running at 198 MHz Around 16K of heap is reserved for FLAC enabled projects The PIC32 MZ EF Curiosity 2 0 board includes the following features: Four push buttons (SW1-SW4 only SW1 is used) Four LEDs (LED1-LED4 only LED1 is used) AK4954 Codec Daughter Board mounted on X32 HEADER 2 socket The PIC32 MZ EF Curiosity 2 0 board does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 The following figure illustrates the application architecture for the PIC32 MZ EF Curiosity 2 0 project without a display The program takes up to approximately 14% (287 KB) of the PIC32MZ2048EFM144 microcontroller's program space and 52% (273 KB) of the RAM Around 16 KB of heap is reserved for FLAC based projects The I2S (Inter-IC Sound Controller) is used with the AK4954 codec The AK4954 is configured in slave mode meaning it receives I 2 S clocks (LRCLK and BCLK) from the PIC32 and the I2S peripheral is configured as a master SAM E70 Xplained Ultra Projects: One project runs on the SAM E70 Xplained Ultra Board which contains a ATSAME70Q21B microcontroller with 2 MB of Flash memory and 384 KB of RAM running at 300 MHz using the following features: One push button (SW1 may be labeled as SW0 on some boards) Two LEDs (LED1 and 2 only LED1 is used) AK4954 Codec Daughter Board mounted on a X32 socket The SAM E70 Xplained Ultra board does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part numbers AC324954 The following figure illustrates the application architecture for the SAM E70 Xplained Ultra project The program takes up to approximately 5% (110 KB) of the ATSAME70Q21B microcontroller's program space and 19% (71 KB) of the RAM Around 16 KB of heap is reserved for FLAC based projects The SSC (Synchronous Serial Controller) is used with the WM8904 codec selected by a strapping option on the WM8904 daughterboard The WM8904 is configured in master mode meaning it generates the I 2 S clocks (LRCLK and BCLK) and the SSC peripheral is configured as a slave ",
							" Demonstration Features USB MSD Host Client Driver (see USB MSD Host Client Driver Library) FAT File System (see File System Service Library) Audio real-time buffer handling AK4954 or WM8904 Codec Driver (see Audio Codec Driver Libraries) I 2 S usage in audio system (see I2S Driver Library) DMA (see DMA Peripheral Library) Timer (see Timer Peripheral Library) GPIO Control (see Port Peripheral Library) ",
							" Tools Setup Differences For the project using the PIC32MZ the I2S interface and the AK4954 as a Slave (the I2S peripheral generates the I 2 S clocks): When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP Select the appropriate processor (PIC32MZ2048EFM144 for the PIC32 MZ EF Curiosity 2 0) Click Finish In the MHC under Available Components select the BSP PIC32 MZ EF Curiosity 2 0 Under Audio Templates double-click on AK4954 Codec Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one Then under Libraries USB Host Stack double-click on MSD Client Driver Finally under Harmony System Services double-click on FILE SYSTEM You should end up with a project graph that looks like this after rearranging the boxes: Connect the MSD Client Driver block to the FILE SYSTEM block Click on the FILE SYSTEM block Under File System Settings check the checkbox for Use File System Auto Mount Feature Under Media0 Media Configuration0 change the Media Type to SYS_FS_MEDIA_TYPE_MSD Click on the I2S Peripheral In the Configurations Options under 32/16-Bit Communication Select bits select (AUDEN=1) 16-bit data 16-bit FIFO 32-bit Channel/64-bit Frame Change Master Clock the Baud Rate to 44 100 Set the Frame Select Pin to C2 The configuration should look like this: Under Tools click on Clock Configuration In the Clock Diagram: Change the Primary Oscillator frequency to 12 000 000 Hz and select EC under POSCMOD Change FPLLICLK to POSC FPLLIDIV to DIV_2 and FPLLMULT to MUL_66 for an SPLL value of 198 MHz Change the UPLLFSEL to FREQ_12MHZ In the Reference Clock #1 section check the ON and OE checkboxes and set ROTRIM1 to 393 and RODIV1 to 8 This should give a REFCLKO1 output of 11 291 601 Hz which is 256 times the 44 100 Hz sample rate For the project using the E70 the SSC interface and the WM8904 as a Master (the WM8904 codec generates the I 2 S clocks) with or without a display: When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP used Select the appropriate processor (ATSAME70Q21B) Click Finish In the MHC under Available Components select the appropriate BSP (SAM E70 Xplained Ultra) Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one Then under Libraries USB Host Stack double-click on MSD Client Driver Finally under Harmony System Services double-click on FILE SYSTEM You should end up with a project graph that looks like this after rearranging the boxes: Connect the MSD Client Driver block to the FILE SYSTEM block Click on the FILE SYSTEM block Under File System Settings check the checkbox for Use File System Auto Mount Feature Under Media0 Media Configuration0 change the Media Type to SYS_FS_MEDIA_TYPE_MSD Click on the WM8904 Driver In the Configurations Options set the Sample Rate to 44 100 In the Clock Diagram set MOSCEL to Main Crystal check the Bypass checkbox and uncheck the RC Crystal Oscillator and Main Crystal Oscillator boxes to make use of the 12 MHz external oscillator: Also in the Clock Diagram in the PCK2 tab of the Programmable Clock Controller section check the On checkbox and set CSS to MAINCLK (12 MHz) Then check the SSC checkbox in the Peripheral Clock Controller section ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/universal_audio_decoders To build this project you must open the audio/apps/universal_audio_decoders/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration ",
							" MPLAB X IDE Project Configurations The following table lists and describes supported project configurations Project Name BSP Used Description uad_pic32mz_ef_c2_ ak4954 pic32mz_ef_curiosity_v2 This demonstration runs on the PIC32MZ2048EFM144 processor on the PIC32 MZ EF Curiosity 2 0 board and the AK4954 Audio Codec Daughter Board The AK4954 codec is configured as the slave and the I2S peripheral as the master The project configuration is for reading data from a file on a USB Mass Storage Device The data is sent to the headphone output of the codec daughter card via I2S protocol using the I2S PLIB uad_sam_e70_xult_ wm8904_ssc sam_e70_xult This demonstration runs on the ATSAME70Q21B processor on the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board The WM8904 codec is configured as the master and the SSC peripheral as the slave The project configuration is for reading data from a file on a USB Mass Storage Device The data is sent to the headphone output of the codec daughter card via I2S protocol using the SSC PLIB ",
							" Configuring the Hardware This section describes how to configure the supported hardware Description For all configurations a pair of headphones should be connected to the HP Out jack of the audio codec A FAT32 file system USB Flash drive will be needed to inserted into the USB TARGET connector of the board You will probably need a USB-A Female to Micro-B Male adapter cable to do so Using the PIC32 MZ EF Curiosity 2 0 board and the AK4954 Audio Codec Daughter Board and I2S PLIB The AK4954 daughter board is plugged into the set of X32 connectors on the right side of the board (X32 HEADER 2)  Note: The PIC32 MZ EF Curiosity 2 0 does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board and SSC PLIB All jumpers on the WM8904 should be toward the front:  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 ",
							" Running the Demonstration This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues Compile and program the target device While compiling select the appropriate MPLAB X IDE project based Refer to Building the Application for details Connect headphones to the HP OUT jack of the Audio Codec Daughter Board Connect power to the board if necessary The system will be in a wait state for USB to be connected (amber LED1 blinking) Connect a USB mass storage device (thumb drive) that contains songs of supported audio format to the USB TARGET connector of the board You will probably need a USB-A Female to Micro-B Male adapter cable to do so When the device is connected the system will scan for audio files Once the scanning is complete and at least one file is found (green LED2 on steady) listen to the audio output on headphones connected to the board Use Switch SW1 as described under Control Description to change the volume or advance to the next track Control Description: Long presses of the push button cycle between volume control and the linear track change mode When in volume control mode short presses of the push button cycle between Low Medium High and Mute volume outputs While in the Mute mode a pause of the playback will also take place When in the linear track change mode short presses of the push button will seek to the end of the currently playing track and start the next track that was found in sequence After all tracks have been played the first track will start again in the same sequential order Button control is shown in the table below ",
							" Button Operations Long Press ( 1 sec) Short Press ( 1 sec) Volume Control Low (-66 dB) - Medium (-48 dB) - High (0 dB) - Mute/Pause Linear Track Change Next sequential track ",
							" Status Indicator Description When the application first starts running it looks to find an attached storage device If one is not found LED1 will toggle on and off about every 100ms indicating that a storage device is not attached When a storage device is attached LED1 will turn off At this time the file system will be scanned for supported files with the appropriate extension If no supported files are found on the storage device LED2 will remain off and scanning of the device will continue If any supported files are found LED2 will turn on and playback of the first file found in sequence will start LED status indication is shown in the table below ",
							" LED Status Operation LED1 Status (Red) LED2 Status (Green) No Storage Device Connected Toggle 100ms Off Storage Device Connected Off See Files Found Operation Playback: Volume Control Off See Files Found Operation Playback: Volume Mute Toggle 500ms See Files Found Operation Playback: Linear Track Change On See Files Found Operation Files Found (Yes/No) See above operations On/Off ",
							" usb_headset This topic provides instructions and information about the MPLAB Harmony 3 USB Speaker Basic demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description This demonstration application configures the development board to implement a USB Headset device configured to run at 48 kHz sampling rate at 16 bit per sample The USB Device driver in Full Speed mode will interface to a USB Host (such as a personal computer) via the USB Device Stack using the V1 0 Audio Function Driver The embedded system will enumerate with a USB audio device endpoint and enable the host system to input/output audio from the USB port using a standard USB Full-Speed implementation The embedded system will stream USB playback audio to the Codec The Codec Driver sets up the audio interface timing DMA channels and buffer queue to enable a continuous audio stream The digital audio is transmitted to the codec through an I2S data module for playback and record through a headphone jack ",
							" Architecture The application runs on the PIC32 MZ EF Curiosity 2 (MZEFC2) demo board as follows: Processor runs @ 200 MHz 4 push buttons (SW1-SW4) 3 LEDs (all red LED1-LED3) and RGB LED (LED4) AK4954 Codec Daughter Board mounted on X32 socket USB Device interface  Note: The PIC32 MZ EF Curiosity 2 does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 The usb_headset application uses the MPLAB Harmony Configurator to setup the USB Audio Device codec and other items in order to play back the USB audio through the Codec Module A USB Host system is connected to the micro-mini USB device connector The application detects the cable connection which can also supply device power; recognizes the type of connection (Full Speed); enumerates its functions with the host isochronous audio streaming playback and record through device Audio stream data is buffered in 1 ms frames for playback/record using the AK4954 Codec daughter board Audio is heard through the Headphone jack (HP OUT) Audio is sent to the record channel from the on-board microphone The following figure shows the basic architecture for the demonstration Figure 1 Architecture Block Diagram ",
							" Demonstration Features Audio playback/record using a AK4954 codec daughterboard on the MZEFC2 board USB connection to a host system using the USB Library Device Stack for a USB Headset device using the MZEFC2 boards MZEFC2 board button processing for volume/mute control USB Attach/Detach and mute status using an LED on MZEFC2 board Utilization of the PIC32 I2S peripheral (as master) on the MZEFC2 board Note that all the calls to the AK4954 codec driver uses the form DRV_CODEC_xxx rather than DRV_AK4954_xxx This is to make the code more generic such that another codec could be substituted for another without having to make changes to the application code except for the location of the driver's public header file ",
							" Tools Setup Differences ",
							" Harmony MHC Component Blocks MPLAB-X Harmony 3 projects only have one associated configuration When each Harmony 3 project is created the MPLAB-X Harmony Configurator (MHC) will support application driver and library code generation for the selected processor Additional MHC code generation is supported by adding additional components to the project graph This includes Core peripheral support for the processor device the Harmony framework and the board support package The USB Headset application will be generated from the following MHC Project Graph after each block's component parameters are configured Figure 9 USB Speaker Project Graph for the PIC32 MZ EF Curiosity 2 Board The creation of this Project Graph and the configuring of each components will be described in the following Sections ",
							" Harmony Core Block Start MHC for the project in order to add the Harmony and the application code components The Board Support Package (BSP) for the Pic32 MZ EF Curiosity board should be selected first from the Available Components Next the Harmony core is selected without FreeRTOS Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one ",
							" USB Audio Component Blocks The MHC USB Audio Stack component blocks can added by selecting the Libraries/USB/Device Stack/Audio Function Driver component template under the MHC Available Components list as shown below Figure 2 USB Headset USB Audio Function Driver Selection Answer yes to all questions This allows the generation of the USB High Speed Driver the USB Device Layer and Audio Function Driver components ",
							" AK4965 Daughter Board Component Blocks Under Audio Templates double-click on AK4954 Codec Template (shown below) Answer Yes to all questions This loads the AK4954 Codec component along with associated I2C I2S and timer driver components  Figure 3 USB Headset AK4954 Codec Selection ",
							" Debug Console Output Debug output to the console is sent to UART6 using the PKOB4 USB connections as a virtual com port on the PC This is the same USB connection used to program the device Three components block have to be added to the diagram: UART6 Console and Debug These can use the default configuration settings ",
							" Harmony Code Configuration Options Each block in the MHC Project Graph may need to be configured through parameters for the specific application These parameters are accessed by selecting the block with the mouse and appear in the Configuration Options window where they can be edited The next section describes the configuration of the USB Math and Codec component blocks for the USB Speaker with “Bass Boost” application ",
							" USB Configuration The application uses USB Library as a \"Device\" stack which will connect to a \"Host\" The USB High Speed Driver is set to “Full Speed” V1 0 interface (not “High Speed” V2 0 Interface): Figure 5 USB Headset USB High Speed Driver Peripheral Configuration The USB Device Layer is configured by selecting Product ID Selection as “usb_headset_multiple_sampling_demo” with an endpoint buffer size of 64 (bytes) The Product String Selection is changed to “Harmony USB Speaker w/Bass Boost Example” This information will be used to generate the fullSpeedConfigurationDescriptor array variable structure (located in initialization c under the config folder) that defines the enumeration of device functions with the USB Host This structure defines the connection to the host at 48 kHz with 16 bit stereo channel data Figure 6 USB Headset USB Device Layer Configuration The Audio Function Driver is configured with an Audio Read Queue that matches that of the codec driver write queue for this Audio V1 0 USB Speaker interface A playback packet queue of length 8 is set with the Audio Read Queue Size The Audio Write Queue Size should be the same (8) which should also match the Audio Write Queue Size of the I2S driver The The maximum USB write packets size is set to 48 * 2 channels/sample * 2 bytes/channel= 192 bytes which gives a 1ms stereo sample packet size at 48Khz (the standard data frame length at this rate) thus the read buffer size needs to be of the same size The write buffer size should be half of this (96 bytes) since the 1ms write buffer only contain single channel (mono) audio data at the 48Khz rate at the same bit resolution (16 bit) Figure 7 USB Headset USB Audio Configuration ",
							" The AK4954 Codec Using the MZEFC2 and the AK4954 Audio Codec Daughter Board: The AK4954 codec uses a I2C interface for configuration and control register setting and SPI interface configured as I2S The settings are shown below Figure 8 USB Headset AK4954 Codec Configuration The I2S Driver uses a transfer queue size of 8 which applies to both read and write channels and matches that that of the USB Read/Write Queue length: Figure 9 USB Headset I2S Driver Configuration When the I2S2 driver is used for DRV_I2S_0 the codec usage mode automatically changes to “Slave” Figure 8 USB Headset I2S Peripheral Driver Configuration The I2C blocks can be used without changes to the configuration Table 1 USB Headset Pic32 MZ Curiosity 2 Pin Configuration ",
							" Clock Manager ",
							" PIC32 MZ EF PLL Clock The CPU Memory and Peripheral clock are generated from the 198Mhz PLL Clock as configured below The I2S clocks are setup for 48KHz sampling rate with stereo 16 bit samples giving a 32 bit sample frame The I2S clocks will be generated as follows: I2S Function Value Description LRCK 48 000000 K Stereo Sample rate clock BCLK 3072000 Hz Bit Rate Clock MCLK 12 288000 MHz Master Clock The clock configuration diagram is shown using Tools/Clock Configuration menu selection The system clock is 198Mhz generated from the System PLL as configured below Figure 7 198Mhz PLL Clock Generation for I2SC Peripheral ",
							" I2SC2 REFCLOCK01 Configuration The I2S master the MCLK to approximate 12 288Mhz This is sourced the Reference Clock #1 as shown below  Figure 7 Reference Clock Generation for I2S Master Peripheral Configuration  Figure 8 Peripheral Clock Generation ",
							" Harmony Code Generation All the needed drivers middleware libraries and application framework code can be generated from the MHC blocks (MHC components) placed in the MHC Project Graph The generated framework code is placed under the firmware/src/config directory under the name of the configuration used for the Harmony 3 project The initial application code is located in the firmware/src directory app c and app h files which utilize the framework drivers middleware and library APIs located in definitions h located in the config directory All Harmony applications first execute the SYS_Initialize function located in initialization c This is executed from the main function to initialize various subsystems such as the clock ports BSP (board support package) codec usb timers and interrupts The application APP_Initialize function in app c is executed last in the generated SYS_Initialize routine after the system initializations have completed The SYS_Tasks function (located in tasks c) is used to update the USB subsystems WM8904 driver timers etc as well as the application state machine (APP_tasks routine in app c) This function is executed from the main polling loop The polling loop either execute SYS_Tasks repeatably in the infinite loop to perform the updates or it the updates occur as separate processes executed at fixed time intervals using an RTOS schedular The application utilizes a simple state machine (APP_Tasks executed from SYS_Tasks) with the following functions Setup the drivers and USB Library interface Respond to USB Host control commands (“Attach” “Detach” “Suspend”) Initiate and maintains the bidirectional data audio streaming for the \"USB Playback\" function Sense Volume control button pushes and set LED status lights ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/usb_headset To build this project you must open the audio/apps/usb_headset/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration ** MPLAB X IDE Project ** This table lists the name and location of the MPLAB X IDE project folder for the demonstration ",
							" MPLAB X IDE Project Configurations This table lists and describes the supported configurations of the demonstration which are located within /firmware/src/config Project Name BSP Used Description uh_pic32mz_ef_c2_ ak4954 pic32_mz_ef_c2 This demonstration runs on the PIC32 MZ EF Curiosity 2 board with the AK4954 Codec ",
							" Configuring the Hardware This section describes how to configure the supported hardware ",
							" Using the PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board: The PIC32 MZ EF Curiosity board and the AK4954 Audio Codec Daughter Board only requires the AK4954 Codec Daughterboard to be connected to X32 Header 2 as shown below No jumper settings are required Figure 9 PIC32 MZ EF Curiosity 2 Board Setup AK4954 Audio Codec Daughter Board on PIC32 MZ EF Curiosity 2 board setup Headphone Out Jack is green Microphone In Jack is pink _ Connect headphones to the green HP OUT jack of the Codec Daughter Board (as shown in the Figure above) The onboard microphone (AK4954 Daughterboard) will be used for the audio input As shown the PIC32 MZ EF Curiosity will be programmed through the USB cable connected to the PKOB4 micro-mini connector Program debug can also be performed over USB this connection ",
							" Running the Demonstration This section demonstrates how to run the demonstration ",
							" Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues Compile and program the target device While compiling select the appropriate MPLAB X IDE project Refer to Building the Application for details Do the following to run the demonstration: Configure the hardware as described in the previous section for the selected MPLAB-X project Connect power to the board compile the application and program the target device Run the device The system will be in a waiting for USB to be connected (LED1 off) Connect to the USB Host via the micro-mini connector (see Configuring the Hardware) Allow the Host computer to acknowledge install drivers (if needed) and enumerate the device No special software is necessary on the Host side LED1 will blink after enumeration It will continue to blink until the Harmony USB Speaker is selected as the speaker device and the audio stream is started It will then turn a solid color If needed configure the Host computer to use the usb_headset as the selected audio recording device For Windows this is done in the \"Recording\" tab in and the \"Playback\" tab of the \"Sound\" dialog\"  Note: selection for Both Windows 10 and Windows 7 sound dialog is accessed by right clicking the loudspeaker icon in the taskbar which will bring up a menu for the selection This is shown in the Figure below for selecting the playback device The record device selected from the \"Recording\" tab in the same way Figure 12 Windows 10 - Sound Dialog Showing Harmony USB Headset Selection  Note: The device \"Harmony USB Headset PIC32MZEF Example\" should be available along with a sound level meter indication audio when playing If no sound level is registering or the name of the Harmony speaker is incorrect uninstall the driver using the Windows Device Manager since it may have incorrect configuration set by a similar connection to one of the other MPLAB-X Harmony Audio Demos Open a playback/record application (such as Skype or Audacity) and initiate playback and record through the USB Headset LED 2 should be a solid color Playback of audio should demonstrate that the audio is being heard in the USB Headset headphones Volume can be change by repeated press of SW1 Volume will increase to maximum It will then mute the speaker (LED1 will fast blink during mute) and then start increasing from minimum volume to maximum after more presses of SW1 NOTE: Volume is also controlled using the PC volume control and the Windows Media Player volume control Recording should also take place through the AK4954 on-board microphone This should be seen when speaking on the \"Sound Dialog\"/Recording sound level meter of the USB Headset device Actual audio can be recorded via the recording function of Audacity or the Connection Test feature of Skype ",
							" Control Description Button control uses the push button function sequence given in the table below: Function Press Volume Control Level 1 Low (-66 dB) Volume Control Level 2 Medium (-48 dB) Volume Control Level 3 High (-0 dB) Mute Mute Note: Mute will transition to Volume Control Level 1 on the next button push USB operational status is given by LED1 as shown below: LED1 Status OFF USB cable detached ON USB cable attached Blinking Playback muted or USB waiting to be configured The PIC32MZ EF Curiosity 2 has a second LED (LED2) which indicates if the audio is streaming or not LED2 Status OFF USB Audio not configured ON USB Audio is streaming Blinking Playback muted or USB Audio not streaming ",
							" usb_microphone This topic provides instructions and information about the MPLAB Harmony 3 USB Microphone demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description This demonstration application configures the development board to implement a USB Microphone device configured to run at 16 Khz sampling rate at 16 bit per sample The USB Device driver in Full Speed mode will interface to a USB Host (such as a personal computer) via the USB Device Stack using the V1 0 Audio Function Driver The embedded system will enumerate with a USB audio device endpoint and enable the host system to input audio from the USB port using a standard USB Full-Speed implementation The embedded system will stream USB playback audio to the Codec The Codec Driver sets up the audio interface timing DMA channels and buffer queue to enable a continuous audio stream The digital audio is transmitted to the codec through an I2S data module for playback through a headphone jack ",
							" Architecture The application runs on the SAM E70 Xplained Ultra Board (E70XULT) which can operate at 300 MHz using the following features: One push button (SW1) Two LEDs (amber LED1 and green LED2) Only LED 1 can be used for a USB Device that requires VBUS sense WM8904 Codec Daughter Board mounted on a X32 socket USB Device interface  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 The usb_microphone application uses the MPLAB Harmony Configurator to setup the USB Audio Device codec and other items in order to play back the USB audio through the WM8904 Codec Module A USB device is connected to the micro-mini USB device connector The application detects the cable connection which can also supply device power; recognizes the type of connection (Full Speed); enumerates its functions with the host isochronous audio streaming playback or recording through the device Audio stream data is buffered in 1 ms frames for playback or recording using the WM8904 Codec daughter board Audio is can be heard through the Headphone jack (HP OUT) The following figure shows the basic architecture for the demonstration USB Microphone Application Block Diagram ",
							" Demonstration Features Audio recording using an WM8904 codec daughterboard on the SAM E70 Xplained Ultra (E70XULT) board USB device connection to a host system using the USB Library Device Stack for a USB Microphone device implemented on the SAM E70XULTZ E70 XULT Button processing for microphone gain control Using the USB Library USB Attach/Detach and mute status using an LED Looping back of the microphone data to the codec headphone output for for playback monitoring of the input audio ",
							" Harmony Configuration and Code Generation The MPLAB-X Harmony Configurator (MHC) Project Graph for usb_microphone_basic is shown below USB Microphone Application MPLAB-X Harmony Configurator Project Graph Each block provides configuration parameters to generate the application framework code This includes all the needed drivers middleware libraries The generated framework code is placed under the firmware/src/config directory under the Harmony 3 project configuration This Harmony 3 application has two configurations as described below : usb_microphone_basic_sam_e70_xult_wm8904_i2sc1_usb - A bare-metal configuration usb_microphone_basic_sam_e70_xult_wm8904_i2sc1_usb_freertos - A configuration that uses the 3rd party FreeRTOS operating system The harmony application system components drivers and mideleware is configured based on the project graph In many cases the default configuration values are used but in general each application requires modifications to these parameter The usb_microphone_basic custom application code code is located in the firmware/src directory of the application folder The app c and app h files are initially generated as stub files in this folder The middleware and library APIs located in definitions h (as generated by MHC) for the given project graph The usb_microphone application utilizes a state machine with the following functions: Setup the drivers and USB Library interface as used by the application WM8904 Codec Driver Timer USB Audio Respond to USB Host control commands (�Attach� �Detach� �Suspend� etc ) Initiate and maintains the audio data streaming for the \"USB Record\" function as data is received from the microphone codec All Harmony applications use the function SYS_Initialize function located in the MHC generated file initialization c This is executed from main to initialize various subsystems such as the clock ports BSP (board support package) codec usb timers and interrupts The application APP_Initialize function in app c is also executed at the end of this routine to setup the application code state machine For the bare-metal configuration The USB WM8904 driver and the application code state machines(APP_Tasks routine in app c) are all updated via calls located in the function SYS_Tasks executed from the main polling loop located in the MHC generated tasks c For the FreeRTOS configuration 4 tasks are configured within 3 processes of a round-robin scheduler The APP_Tasks and Codec update tasks is in 1 of the scheduled process while the USB High Speed Driver and USB Device Driver are in there own separate tasks ",
							" Tools Setup Differences USB Configuration The application uses USB Library as a \"Device\" stack which will connect to a \"Host\" The USB High Speed Driver is selected to by �Full Speed� (not �High Speed�): USB High Speed Driver Configuration The USB Device Layer is configured by selecting the �usb_microphone_demo� with an endpoint buffer size of 64 (bytes) The Audio Function Driver is configured for 5 USB endpoints with a single function having 3 interfaces All of these are defined for a USB Microphone device in the fullSpeedConfigurationDescriptor array variable structure (located in initialization c under the config folder) This structure defines the connection to the host at 48 Khz with 16 bit stereo channel data A packet queue of length APP_QUEUE_SIZE (set to 2) is used for playback data The maximum USB packets size is set to 16 samples * 2 channels per sample * 2 bytes per channel= 64 bytes which gives a 1ms stereo sample packet size at 16Khz (the standard data frame length at this rate) thus the buffer size needs to be of the same size USB Device Layer Configuration The Audio Function Driver is configured with a Audio Read Queue that matches that of the codec driver write queue for this Audio V1 0 USB Microphone interface USB Audio Function Configuration The WM8904 Codec Configuration The WM8904 codec uses a TWIHS0 (I2C) interface for module configuration and control register setting and a I2SC1 (I2S) interface for audio data The default settings are used The default values are used for the TWIHS and I2C drivers The E70 I2SC1 driver is set to be the master with a data length of 16 2 channels (stereo) and a MCLK divider value of of 256 These a default values as shown below: I2SC1 Peripheral Configuration The I2S driver is configured with transfer queue size of 8 (default value) that matches that of the USB Read Queue as shown below: USB Microphone I2S Configuration The WM8904 Codec is configured with an I2S slave interface operating at 16000 Hz sampling rate as shown below: USB Microphone I2S Configuration Also the microphone input is enabled with bias for an electret microphone Pin Manager Configuration The buttons LED Switch I2S and I2C interfaces using GPIO pins via the Microchip Harmony Configurator (MHC) Pin Manager as follows: When the I2SC1 is used the following pins are used: NAME PORT E70 PIN Notes I2SC1_WS PE00 4 I2S LRCK (Word Select) I2SC1_DO0 PE01 6 I2S DO (Data Out) I2SC1_DI0 PE02 7 I2S DI (Data In) I2SC1_CK PA20 22 I2S BCLK (Bit Clock) I2SC1_GCLK PA19 23 I2S MCLK (Bit Clock as used by the E70 I2SC1 I2S Master) PMC_PCK2 PA18 24 I2S MCLK (Master Clock as used by the WM8904 Codec I2S Slave) SWITCH PA11 66 Push Button LED1 PA05 73 - TWIHS0_TWCK0 PA04 77 I2C TWIHS0_TWD0 PA03 91 I2C STDBY PD11 98 - LED2/VBUS DETECT(J203) PB08 141 J203 set to VBUS DETECT for USB Device Clock Manager All clocks are generated from the 12 Mhz Main Clock oscillator including the following Clock Value Description HCLK 240 MHz Processor Clock USB FS 48 MHz USB Full Speed Clock The I2SC1 peripheral is set as the I2S bus master It uses the I2SC1_GCLK to generate the I2S timing to the codec slave I2S interface The I2SC clocks are setup for 16Khz sampling rate (LRCK) with stereo 16 bit samples giving a 32 bit sample frame The frame bit clock (BCLK) and the I2S Master clock (MCLK) is calculated as follows: LRCK = 16 KHz FRAME_SIZE = 16 bits/channel * 2 channels BCLK = LRCK * 16 * 2 = 512 KHz MCLK_MULT = 256 MCLK = MCLK_MULT * LRCK = 4 096 KHz The generated MCLK should be set as close as possible to the calculated values as given below: CLOCK I2S Function I2SC1_WS LRCK I2SC1_CK BCLK I2SC1_GCLK MCLK(I2SC1) PCK2 MCLK(X32) The E70 XULT board only provides PCK2 as the source of the MCLK to the X32 WM8904 Codec Daughter Board connector It must be generated the same as I2SC1_GCLK The actual generated value utilizes the PLLA clock as the source for both the I2SC1_GCLK and the PCK2 These values generate the following clocks These I2S clocks are generated from the I2SC1 GCLK peripheral acting as I2S master MPLAB Harmony Configurator: Clock Diagram Configuration The MHC Clock Diagram to generate the processor (HCK) PCK2 (I2S MCLK) and the I2SC1 MCLK (I2SC1_GCLK) is given below USB Microphone MHC Clock Diagram Uncheck the Main RC Oscillator and check the �Bypass� for the Main Crystal Oscillator When the Bypass is checked it will cause the Main Crystal Oscillator to become disabled An external MEMS oscillator input on the XIN pin is used for Main Clock generation USB Microphone Main Clock The PLLA clock is generated from 12 Mhz Main Clock using the selected DIVA and MULA values as shown below: USB Microphone PLLA Clock The I2S MCLK is generated using both the PCK2 output and the I2SC1_GCLK These are both enabled and generated using the PLLA clock source to give the same value of 4 095 238 Hz (to approximate the 4096000 Hz sampling rate) as shown below: USB Microphone I2S1 GCLK and PCK2 Configuration Timer Driver The Timer driver configuration Timer driver instance 0 is used by a system for button processing (debounce and long press) and LED blink delay It needs to be set to �Enable Period Interrupt� It is also required by the WM8904 Codec Driver The default configuration values are used ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/usb_microphone To build this project you must open the audio/apps/usb_microphone/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration MPLAB X IDE Project This table lists the name and location of the MPLAB X IDE project folder for the demonstration ",
							" MPLAB X IDE Project Configurations This table lists and describes the supported configurations of the demonstration which are located within /firmware/src/config Project Name BSP Used Description usb_microphone_basic_sam_e70_xult_ wm8904_i2sc_usb sam_e70_xult This demonstration runs on the SAM E70 Xplained Ultra board with the WM8904 daughter board usb_microphone_basic_sam_e70_xult_ wm8904_i2sc_usb_freertos sam_e70_xult This demonstration runs on the SAM E70 Xplained Ultra board with the WM8904 daughter board It also uses FreeRTOS ",
							" Configuring the Hardware This section describes how to configure the supported hardware Description Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board using the I2SC PLIB: Jumper J203 which is next to the SAM E70 Xplained Ultra logo should be jumpered for VBUS Detect To connect to the I2SC the jumpers (J6 J7 J8 and J9) on the WM8904 Codec Daughterboard must be oriented towards the pink mic in connector See the red outlined jumpers in the below image as reference  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 ",
							" Running the Demonstration This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues Compile and program the target device While compiling select the appropriate MPLAB X IDE project Refer to Building the Application for details Figure 1 WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board Headphone Out Jack is green Microphone In Jack is pink Note: the brown wire is a jumper wire which is not relevant for this app Do the following to run the demonstration: Attach the WM8904 Daughter Board to the X32 connector Connect headphones (monitor headphones) to the HP OUT jack of the WM8904 Audio Codec Daughter Board (see Figure 1) and a microphone to the pink MIC IN jack (Refer to Figure 1 Connect power to the board and connect the USB cable (EDBG) used for programming the device (Refer to Figure 1) Compile the application and program the target device using the EDBG Run the device The system then will be in a waiting for USB to be connected (amber LED1 off) Connect to the USB Host via the micro-mini connector (Refer to Figure 1) located above the push-button switches on the right side of the board using a standard USB cable The LED1 should turn to a solid amber color as the host enumerates and then initiates the audio stream After the Host computer acknowledges the connection it will install drivers (if needed) No special software is necessary on the Host side Figure 2 Windows 7 Sound Dialog showing USB Microphone with Sound Level Meter If needed configure the Host computer to use the usb_microphone as the selected audio recording device For Windows this is done in the \"Recording\" tab in the \"Sound\" dialog (as shown in Figure 2) accessed by right clicking the loudspeaker icon on the taskbar  Note: The device \"Harmony USB Microphone Example\" should be available along with a sound level meter indication audio when playing If no sound level is registering uninstall the driver and reboot the host computer since it may have incorrect configuration set by a similar connection to one of the other MPLAB-X Harmony Audio Demos The Microphone audio should be heard through the monitor headphones Open a recording application (such as Audacity) and initiate a recording sessiont through the USB Microphone Figure 3 Audacity Recording Session using USB Microphone Playback of recording session audio is being heard in the USB Microphone headphones ",
							" Control Description Button control uses SW1 in a push button function sequence given in the table below: Function # Function Press 1 Gain Cont Low Gain 2 Gain Cont High Gain Note: Function 2 will transition back to Function 1 on the next button push USB operational status is given by LED as shown below: LED Status Status OFF USB cable detached ON USB cable attached Blinking Attached/not Streaming ",
							" usb_speaker This topic provides instructions and information about the MPLAB Harmony 3 USB Speaker Basic demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description This demonstration application configures the development board to implement a USB Speaker device configured to run at 48 kHz sampling rate at 16 bit per sample The USB Device driver in Full Speed mode will interface to a USB Host (such as a personal computer) via the USB Device Stack using the V1 0 Audio Function Driver The embedded system will enumerate with a USB audio device endpoint and enable the host system to input audio from the USB port using a standard USB Full-Speed implementation The embedded system will stream USB playback audio to the Codec The Codec Driver sets up the audio interface timing DMA channels and buffer queue to enable a continuous audio stream The digital audio is transmitted to the codec through an I2S data module for playback through a headphone jack ",
							" Architecture The application runs on two target boards as follows: SAM E70 Xplained Ultra Board Processor runs @ 300 MHz One push button (SW) Two LEDs (amber LED1 and green LED2) Only LED 1 can be used for a USB Device application due to requiring VBUS sense to be selected rather than LED2 WM8904 Codec Daughter Board mounted on a X32 socket (configured as I2SC1 slave) USB Device interface  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 PIC32 MZ EF Curiosity 2 Processor runs @ 200 MHz 4 push buttons (SW1-SW4) 3 LEDs (all red LED1-LED3) and RGB LED (LED4) AK4954 Codec Daughter Board mounted on X32 socket USB Device interface  Note: The PIC32 MZ EF Curiosity 2 does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 The usb_speaker_basic application uses the MPLAB Harmony Configurator to setup the USB Audio Device codec and other items in order to play back the USB audio through the WM8904 Codec Module A USB Host system is connected to the micro-mini USB device connector The application detects the cable connection which can also supply device power; recognizes the type of connection (Full Speed); enumerates its functions with the host isochronous audio streaming playback through device Audio stream data is buffered in 1 ms frames for playback using the WM8904 Codec daughter board Audio is heard through the Headphone jack (HP OUT) The following figure shows the basic architecture for the demonstration Figure 1 Architecture Block Diagram ",
							" Demonstration Features Audio playback using an WM8904 codec daughterboard on the SAM E70 xPlained Ultra (E70XULT) board Audio playback using a AK4954 codec daughterboard on the PIC32 MZ EF Curiousity 2 (MZEFC2) USB connection to a host system using the USB Library Device Stack for a USB Speaker device using E70XULT and MZEFC2 boards E70XULT and MZEFC2 board button processing for volume/mute control USB Attach/Detach and mute status using an LED on E70XULT and MZEFC2 boards Utilization of the of SAM E70 I2S peripherals E70 SSC (as slave) and I2SC (as master) on E70XULT board Utilization of the PIC32 I2S peripheral (as master) on the MZEFC2 board Note that all the calls to the WM8904 and AK4954 codec drivers use the form DRV_CODEC_xxx rather than DRV_WM8904_xxx or DRV_AK4954_xxx This is to make the code more generic such that another codec could be substituted for another without having to make changes to the application code except for the location of the driver�s public header file ",
							" Tools Setup Differences ",
							" Harmony Configuration The usb_speaker demonstration uses multiples projects for multiple hardware configurations MPLAB-X Harmony 3 projects only have one associated configuration When each Harmony 3 project is created the MPLAB-X Harmony Configurator (MHC) code generation is guided by the processor that is selected Start MHC for the project in order to add the application code components Both projects of the usb_speaker application use the USB Audio stack components These can be added by selecting the Libraries/USB/Device Stack/Audio Function Driver component template under the MHC Available Components list as shown below Answer yes to all questions This loads the USB High Speed Driver the USB Device Layer and Audio Function Driver components The Codec component to be used depends on the hardware and peripheral configuration This is described in the following two sections The MHC Project Graph for usb_speaker_basic is shown below for the E70XULT board Figure 2 USB Speaker Basic MHC Project Graph for the SAM E70 Xplained Ultra Board Each block provides configuration parameters to generate the application framework code This includes all the needed drivers middleware libraries The generated framework code is placed under the firmware/src/config directory for this usb_speaker application (usb_speaker_basic_sam_e70_xult_wm8904_usb) The usb_speaker_basic application code is located in the firmware/src directory app c and app h files which utilize the framework drivers middleware and library APIs located in definitions h (as generated by the configurator) A configuration utilizing the I2SC1 peripheral as a slave is used to replace the SSC as a master in the above diagram Also a configuration that adds the FreeRTOS block to the above project is also given ",
							" PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board Configuration The MZEFC2 board configuration in similar to the prior E70XULT board configuration but replaces the WM8904 with an AK4954 Codec which uses a different I2S peripheral driver In the MHC under Available Components select the BSP PIC32 MZ EF Curiosity 2 0 Under Audio Templates double-click on AK4954 Codec Template (shown below) Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one This loads the AK4954 Codec component along with associated I2C I2S and timer driver components The project configuration should now look something like this: Figure 3 USB Speaker Project Graph for the PIC32 MZ EF Curiosity 2 Board ",
							" Harmony Code Configuration Options Each block in the MHC Project Graph may need to be configured through parameters for the specific application These parameters are accessed by selecting the block with the mouse and appear in the Configuration Options window where they can be edited The next section describes the configuration of the USB Math and Codec component blocks for the USB Speaker with �Bass Boost� application USB Configuration The application uses USB Library as a \"Device\" stack which will connect to a \"Host\" The USB High Speed Driver is set to �Full Speed� V1 0 interface (not �High Speed� V2 0 Interface): The USB Device Layer is configured by selecting Product ID Selection as �usb_speaker_demo� with an endpoint buffer size of 64 (bytes) The Product String Selection is changed to �Harmony USB Speaker w/Bass Boost Example� This information will be used to generate the fullSpeedConfigurationDescriptor array variable structure (located in initialization c under the config folder) that defines the enumeration of device functions with the USB Host This structure defines the connection to the host at 48 kHz with 16 bit stereo channel data The Audio Function Driver is configured with an Audio Read Queue that matches that of the codec driver write queue for this Audio V1 0 USB Speaker interface A playback packet queue of length 64 is set with the Audio Read Queue Size configuration which should match the Audio Write Queue Size of the WM8904/I2S The Audio Write Queue Size is unimportant The The maximum USB packets size is set to 48 * 2 channels/sample * 2 bytes/channel= 192 bytes which gives a 1ms stereo sample packet size at 48Khz (the standard data frame length at this rate) thus the buffer size needs to be of the same size ",
							" The WM8904 Codec Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board: The WM8904 codec uses a TWIHS (I2C) interface for configuration and control register setting and either a SSC for audio data or I2SC I2S interface The default settings are used as shown below for SSC: When the I2SC1 driver is used for DRV_I2S_0 the usage mode changes to �Slave� The I2S configuration uses a Transfer queue size of 64 matching that that of the USB Read Queue: The I2SC1 automatically replaces the �PLIB Used� when it is connected to the I2S block in place of the SSC ",
							" Pin Manager The buttons LED Switch I2S and I2C interfaces using GPIO pins via the Microchip Harmony Configurator (MHC) Pin Manager as follows for the SSC: NAME PORT E70 PIN Notes SSC_TK PB01 20 I2S BCLK SSC_TF PB00 21 I2S LRCK PMC_PCK2 PA18 24 I2S MCLK (Master Clock) SSC_TD PD26 53 I2S Data SWITCH PA11 66 Push Button LED PA05 73 - TWIHS0_TWCK0 PA04 77 I2C TWIHS0_TWD0 PA03 91 I2C STDBY PD11 98 - LED2/VBUS DETECT(J204) PB08 141 J204 set to VBUS DETECT for USB Device When the I2SC1 is used the following pins are used: NAME PORT E70 PIN Notes I2SC1_WS PE00 4 I2S LRCK (Word Select) I2SC1_DO0 PE01 6 I2S DO (Data Out) I2SC1_DI0 PE02 7 I2S DI (Data In) I2SC1_CK PA20 22 I2S BCLK (Bit Clock) I2SC1_GCLK PA19 23 I2S MCLK (Bit Clock as used by the E70 I2SC1 I2S Master) PMC_PCK2 PA18 24 I2S MCLK (Master Clock as used by the WM8904 Codec I2S Slave) SWITCH PA11 66 Push Button LED1 PA05 73 - TWIHS0_TWCK0 PA04 77 I2C TWIHS0_TWD0 PA03 91 I2C STDBY PD11 98 - LED2/VBUS DETECT(J204) PB08 141 J204 set to VBUS DETECT for USB Device ",
							" Clock Manager All clocks are generated from the 12 MHz Main Clock oscillator From this clock is derived the following clocks: Clock Value Description HCLK 300 MHz Processor Clock PCK2 12 MHz Peripheral Clock 2 USB FS 48 MHz USB Full Speed Clock The I2S clocks are setup for 48KHz sampling rate with stereo 16 bit samples giving a 32 bit sample frame The I2S clocks are generated from the WM8904 acting as I2S master using the 12 288 Mhz master clock obtained from Peripheral Clock 2 (PCK2) The I2S clocks will then be generated as follows: I2S Function Value Description LRCK 48 000000 K Sample rate clock BCLK 3072000 Hz Bit Rate Clock MCLK 12 288000 MHz Master Clock ",
							" MPLAB Harmony Configurator: Tools Clock Configuration ",
							" SSC Clock Configuration Uncheck the Main RC Oscillator and check the �Bypass� for the Main Crystal Oscillator When the Bypass is checked it will cause the Main Crystal Oscillator to become disabled An external MEMS oscillator input on the XIN pin is used for Main Clock generation Figure 4 Main Clock Configuration Enable the PCK2 output to enable the WM8904 master clock generation to enable clocking for the SSC operating as a slave I2S: Figure 5 Clock Diagram Peripheral Clock Enable Enable the peripheral clock to the SSC using the Peripheral Clock Enable of the Peripheral Clock Controller: Figure 6 Enable SSC Clock ",
							" I2SC1 Clock Configuration The I2SC1 master requires the I2SC1_GCLK generate an MCLK to approximate 12 288Mhz This is sourced using the PLLA Clock (PLLACK) as shown below Figure 7 PLLA Clock Generation for I2SC Peripheral Figure 8 Generic Clock (GCLK) Generation for the I2SC1 ",
							" Harmony Code Generation All the needed drivers middleware libraries and application framework code can be generated from the MHC blocks (MHC components) placed in the MHC Project Graph The generated framework code is placed under the firmware/src/config directory under the name of the configuration used for the Harmony 3 project The initial application code is located in the firmware/src directory app c and app h files which utilize the framework drivers middleware and library APIs located in definitions h located in the config directory All Harmony applications first execute the SYS_Initialize function located in initialization c This is executed from the main function to initialize various subsystems such as the clock ports BSP (board support package) codec usb timers and interrupts The application APP_Initialize function in app c is executed last in the generated SYS_Initialize routine after the system initializations have completed The SYS_Tasks function (located in tasks c) is used to update the USB subsystems WM8904 driver timers etc as well as the application state machine (APP_tasks routine in app c) This function is executed from the main polling loop The polling loop either execute SYS_Tasks repeatably in the infinite loop to perform the updates or it the updates occur as separate processes executed at fixed time intervals using an RTOS schedular The application utilizes a simple state machine (APP_Tasks executed from SYS_Tasks) with the following functions Setup the drivers and USB Library interface Respond to USB Host control commands (�Attach� �Detach� �Suspend�) Initiate and maintains the bidirectional data audio streaming for the \"USB Playback\" function Sense Volume control button pushes and set LED status lights ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/usb_speaker To build this project you must open the audio/apps/usb_speaker/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration MPLAB X IDE Project This table lists the name and location of the MPLAB X IDE project folder for the demonstration ",
							" MPLAB X IDE Project Configurations This table lists and describes the supported configurations of the demonstration which are located within /firmware/src/config Project Name BSP Used Description us_basic_pic32mz_ef_c2_ ak4954 pic32_mz_ef_c2 This demonstration runs on the PIC32 MZ EF Curiosity 2 board with the AK4954 Codec us_basic_sam_e70_xult_ wm8904_i2sc_usb sam_e70_xult This demonstration runs on the SAM E70 Xplained Ultra board with the WM8904 daughter board using the I2SC PLIB us_basic_sam_e70_xult_ wm8904_ssc_usb sam_e70_xult This demonstration runs on the SAM E70 Xplained Ultra board with the WM8904 daughter board using the SSC PLIB us_basic_sam_e70_xult_ wm8904_ssc_usb_freertos sam_e70_xult This demonstration runs on the SAM E70 Xplained Ultra board with the WM8904 daughter board using the I2SC PLIB It also uses FreeRTOS ",
							" Configuring the Hardware This section describes how to configure the supported hardware Description Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board configured for the I2SC1 PLIB: Jumper J203 which is next to the SAM E70 Xplained Ultra logo should be jumpered for VBUS (not LED2) To connect to the I2SC1 the jumpers (J6 J7 J8 and J9) on the WM8904 Codec Daughterboard must be oriented toward the pink mic in connector Attach the WM8904 Daughter Board to the X32 connector and connect headphones to the green HP OUT jack as shown in the figure below WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board Headphone Out Jack is green Microphone In Jack is pink Note: the brown wire is a jumper between EXT1-13 to J601(Camera)-14 and is not used for this demo  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 As shown the SAM E70 will be programmed via MPLAB-X through the USB cable connected to the EDBG micro-mini connector Program debug can also be performed over USB this connection if required Using the PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board: The PIC32 MZ EF Curiosity board and the AK4954 Audio Codec Daughter Board only requires the AK4954 Codec Daughterboard to be connected to X32 Header 2 as shown below No jumper settings are required AK4954 Audio Codec Daughter Board on PIC32 MZ EF Curiosity 2 board Headphone Out Jack is green Microphone In Jack is pink  Note: The SAM E70 Xplained Ultra board does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 Connect headphones to the green HP OUT jack of the Codec Daughter Board (as shown in the Figure above) As shown the SAM E70 will be programmed through the USB cable connected to the PKOB4 micro-mini connector Program debug can also be performed over USB this connection ",
							" Running the Demonstration This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues Compile and program the target device While compiling select the appropriate MPLAB X IDE project Refer to Building the Application for details Do the following to run the demonstration: Configure the hardware as described in the previous section for the selected MPLAB-X project Important: The I2SC/SSC jumpers must be in the correct position for the configuration being run Connect power to the board compile the application and program the target device Run the device The system will be in a waiting for USB to be connected (LED1 off) Connect to the USB Host via the micro-mini connector (see Configuring the Hardware) Allow the Host computer to acknowledge install drivers (if needed) and enumerate the device No special software is necessary on the Host side LED1 will blink after enumeration It will continue to blink until the Harmony USB Speaker is selected as the speaker device and the audio stream is started It will then turn a solid color If needed configure the Host computer to use the usb_speaker as the selected audio recording device For Windows this is done in the \"Recording\" tab in the \"Sound\" dialog for Windows 7 or by selecting the �Open Sound Setting� The sound dialog selection for Both Windows 10 and Windows 7 sound dialog is accessed by right clicking the loudspeaker icon in the taskbar which will bring up a menu for the selection This is shown in the Figure below for Windows 10 Windows 7 works in a similar fashion Figure 12 Windows 10 - Sound Dialog Showing Harmony USB Speaker Selection  Note: The device \"Harmony USB Speaker Example\" should be available along with a sound level meter indication audio when playing If no sound level is registering or the name of the Harmony speaker is incorrect uninstall the driver using the Windows Device Manager since it may have incorrect configuration set by a similar connection to one of the other MPLAB-X Harmony Audio Demos Open a playback application (such as Window Media Player) and initiate playback through the USB Speaker LED 1 should be a solid color Open a playback application (such as Window Media Player) and initiate playback through the USB Speaker Playback of the should demonstrate that the audio is being heard in the USB Speaker headphones Volume can be change by repeated press of SW1 Volume will increase to maximum It will then mute the speaker (LED1 will fast blink during mute) and then start increasing from minimum volume to maximum after more presses of SW1 NOTE: Volume is also controlled using the PC volume control and the Windows Media Player volume control ",
							" Control Description Button control uses the push button function sequence given in the table below: Function Press Volume Control Level 1 Low (-66 dB) Volume Control Level 2 Medium (-48 dB) Volume Control Level 3 High (-0 dB) Mute Mute Note: Mute will transition to Volume Control Level 1 on the next button push USB operational status is given by LED1 as with the other USB Audio Demos as shown below: LED1 Status OFF USB cable detached ON USB cable attached Blinking Playback muted or USB waiting to be configured The PIC32MZ EF Curiosity 2 has a second LED (LED2) which indicates if the audio is streaming or not LED1 Status OFF USB Audio not configured ON USB Audio is streaming Blinking Playback muted or USB Audio not streaming ",
							" usb_speaker_bass_boost This topic provides instructions and information about the MPLAB Harmony 3 USB Speaker with �Bass Boost� audio enhancement demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description This demonstration application configures the development board to implement a USB Speaker device configured to run at 48 Khz sampling rate at 16 bit per sample and process the USB audio input through a \"Bass Boost\" filter (using either the CMSIS-DSP or the PIC32 MZ EF DSP library functions) prior to playback The USB Device driver in Full Speed mode will interface to a USB Host (such as a personal computer) via the USB Device Stack using the V1 0 Audio Function Driver The embedded system will enumerate with a USB audio device endpoint and enable the host system to input audio from the USB port using a standard USB Full-Speed implementation The embedded system will stream USB playback audio to a \"Bass Boost\" filter prior to the audio output for playback through codec hardware The USB Device driver in Full Speed mode will interface to a USB Host (such as a personal computer) via the USB Device Stack using the V1 0 Audio Function Driver The embedded system will enumerate with a USB audio device endpoint and enable the host system to input audio from the USB port using a standard USB Full-Speed implementation The embedded system will stream USB playback audio to a \"Bass Boost\" filter prior to the audio output for playback through codec hardware ",
							" Architecture The application runs on two target boards as follows: SAM E70 Xplained Ultra Board Processor runs @ 300 MHz One push button (SW) Two LEDs (amber LED1 and green LED2) Only LED 1 can be used for a USB Device application due to requiring VBUS sense to be selected rather than LED2 WM8904 Codec Daughter Board mounted on a X32 socket (configured as I2SC1 Master) USB Device interface  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 PIC32 MZ EF Curiosity 2 Processor runs @ 200 MHz 4 push buttons (SW1-SW4) 3 LEDs (all red LED1-LED3) and RGB LED (LED4) AK4954 Codec Daughter Board mounted on X32 socket USB Device interface  Note: The PIC32 MZ EF Curiosity 2 does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 The usb_speaker_bass_boost application uses the MPLAB Harmony Configurator to setup the USB Audio Device codec and other items in order to play back the USB audio through the Codec Module The USB Host system that can provide streaming audio (like a PC) is connected to the micro-mini USB device connector The application then detects the cable connection which can also supply device power; recognizes the type of connection (Full Speed); enumerates the devices functions it can provide to the host and then selects the isochronous audio streaming playback Audio stream data is buffered in 1 MS frames for playback using the WM8904 Codec daughter board Audio is heard through the Headphone jack (HP OUT) A USB Host system is connected to the micro-mini USB device connector The application detects the cable connection which can also supply device power; recognizes the type of connection (Full Speed); enumerates its functions with the host isochronous audio streaming playback through device Audio stream data is buffered in 1 MS frames for playback using the WM8904 Codec daughter board Audio is heard through the Headphone jack (HP OUT) ",
							" Bass Boost Filter The �Bass Boost� audio enhancement is the 16 bit fixed-point implementation of a \"Peak Shelving Filter\" described by: NOTES: The parameter \"K\" sets the transition frequency Fc above where the boost goes away The parameter \"V0\" sets the boost or cut value in dB The parameter �root2� adjusts the slope of the transition (replaces square root of 2) Giving the coefficients of 2nd-order difference equation: The Direct-Form 1 implementation (without scaling) is shown below: Figure 1 Biquad Filter - Direct Form 1 The a0 scaling parameter can assumed to be 1 but for fixed point coefficient multiplies the right hand side coefficients should be scaled to fit into the required �Q� format See LIBQ or CMIS-DSP library documentation for the defined Q formats for fixed point values required by the library The response of the filter for a bass boost of 6dB and a cutoff of 200Hz is shown below Figure 2 Peak Shelving Filter Frequency Response Fc=200 Hz Gboost = 6 dB The gain is boosted below ~350 Hz and attenuated by -6dB above 800Hz with a transition in between the -6dB attenuation of the upper frequencies give headroom such that the boost does not overly saturate the audio output Figure 3 USB Speaker w/Bass Boost - Block Diagram ",
							" Demonstration Features Playback using an WM8904 codec daughterboard on the SAM E70 xPlained Ultra (E70XULT) board Playback using an AK4954 codec daughterboard on the PIC32 MZ EF Curiousity 2 (MZEFC2) board USB connection to a host system using the USB Library Device Stack for a USB Speaker device using E70XULT or MZEFC2 Button processing for volume/mute/Bass Boost control using E70XULT or MZEFC2 USB Attach/Detach and mute status using an LED using E70XULT or MZEFC2 Utilization of the of I2S peripheral I2SC (as master) for the E70XULT Utilization of the I2S peripheral for the MZEFC2 Utilization of the DSP Math libraries (CMSIS-DSP and LIBQ/DSP) for both the ARM and MIPS processors to implement \"Bass Boost\" audio enhancement filters Note that all the calls to the WM8904 and AK4954 codec drivers use the form DRV_CODEC_xxx rather than DRV_WM8904_xxx or DRV_AK4954_xxx This is to make the code more generic such that another codec could be substituted for another without having to make changes to the application code except for the location of the driver�s public header file ",
							" Tools Setup Differences ",
							" Harmony Configuration The usb_speaker_bass_boost demonstration uses multiples projects for multiple hardware configurations MPLAB-X Harmony 3 projects only have one associated configurations When each Harmony 3 project is created the MPLAB-X Harmony Configurator (MHC) code generation is guided by the processor that is selected Start MHC for the project in order to add the application code components Both projects of the usb_speaker_bass_boost application use the USB Audio stack components These can be added by selecting the Libraries/USB/Device Stack/Audio Function Driver component template under the MHC Available Components list as shown below Answer yes to all questions This loads the USB High Speed Driver the USB Device Layer and Audio Function Driver components Additional MHC components for Math and Codec depend on the hardware configuration and are described in the next two sections The MHC Project Graph for usb_speaker_bass_boost is shown below ",
							" PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board Configuration In the MHC under Available Components select the BSP PIC32 MZ EF Curiosity 2 0 Under Audio Templates double-click on AK4954 Codec Template (shown below) Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one This loads the AK4954 Codec component along with associated I2C I2S and timer driver components Select the Audio/Math/Math Libraries component to load the libq_c libq/dsp libraries as shown below The project configuration should now look something like this: Figure 4 USB Speaker w/Bass Boost MHC Project Graph showing the PIC32 Math Libraries Component Block ",
							" SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board Configuration When building a new application start by creating a 32-bit MPLAB Harmony 3 project in MPLAB X IDE by selecting File New Project Chose the Configuration name based on the BSP used Select the appropriate processor (ATSAME70Q21B) Click Finish In the MHC under Available Components select the appropriate BSP (SAM E70 Xplained Ultra) Under Audio Templates double-click on WM8904 Codec Answer Yes to all questions except for the one regarding FreeRTOS; answer No to that one Select the Libraries/USB/Device Stack/Audio Function Driver component template as shown below Answer yes to all questions This loads the USB High Speed Driver the USB Device Layer and Audio Function Driver components To add the CMSIS-DSP Library to the project select the CMSIS packs component The project configuration should look something like this: Figure 5 The USB Speaker w/Bass Boost Project MHC Project Graph Showing the CMSIS-DSP Library Block (CMSIS Pack) ",
							" Harmony Code Configuration Options Each block in the MHC Project Graph may need to be configured through parameters for the specific application These parameters are accessed by selecting the block with the mouse and appear in the Configuration Options window where they can be edited The next section describes the configuration of the USB Math and Codec component blocks for the USB Speaker with �Bass Boost� application ",
							" USB Configuration The application uses USB Library as a \"Device\" stack which will connect to a \"Host\" The USB High Speed Driver is set to �Full Speed� V1 0 interface (not �High Speed� V2 0 Interface): The USB Device Layer is configured by selecting Product ID Selection as �usb_speaker_demo� with an endpoint buffer size of 64 (bytes) The Product String Selection is changed to �Harmony USB Speaker w/Bass Boost Example� This information will be used to generate the fullSpeedConfigurationDescriptor array variable structure (located in initialization c under the config folder) that defines the enumeration of device functions with the USB Host This structure defines the connection to the host at 48 Khz with 16 bit stereo channel data The Audio Function Driver is configured with an Audio Read Queue that matches that of the codec driver write queue for this Audio V1 0 USB Speaker interface A playback packet queue of length 64 is set with the Audio Read Queue Size configuration which should match the Audio Write Queue Size of the WM8904/I2S The Audio Write Queue Size is unimportant The The maximum USB packets size is set to 48 * 2 channels/sample * 2 bytes/channel= 192 bytes which gives a 1ms stereo sample packet size at 48Khz (the standard data frame length at this rate) thus the buffer size needs to be of the same size ",
							" The WM8904 Codec Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board: The WM8904 codec uses a TWIHS (I2C) interface for configuration and control register setting and the I2SC1 peripheral interface This application uses the I2SC1 I2S peripheral interface in Master mode as shown below: When the I2SC1 driver is used for DRV_I2S_0 the usage mode changes to �Slave� The I2S configuration uses a Transfer queue Size of 64 and I2S Data Length of 16 matching that that of the USB Read Queue Bidirectional DMA is set (using 2 channels) for data transfer ",
							" Pin Manager The following pins are used for Clocks I2SC1 I2C Reset LEDs Switches and VBUS Detect: The I2SC1 peripheral uses the following pins: NAME PORT E70 PIN Notes I2SC1_WS PE00 4 I2S LRCK (Word Select) I2SC1_DO0 PE01 6 I2S DO (Data Out) I2SC1_DI0 PE02 7 I2S DI (Data In) I2SC1_CK PA20 22 I2S BCLK (Bit Clock) I2SC1_GCLK PA19 23 I2S MCLK (Bit Clock as used by the E70 I2SC1 I2S Master) PMC_PCK2 PA18 24 I2S MCLK (Master Clock as used by the WM8904 Codec I2S Slave) SWITCH PA11 66 Push Button LED1 PA05 73 - TWIHS0_TWCK0 PA04 77 I2C TWIHS0_TWD0 PA03 91 I2C STDBY PD11 98 - LED2/VBUS DETECT(J204) PB08 141 J204 set to VBUS DETECT for USB Device ",
							" Clock Manager All clocks are generated from the 12 MHz Main Clock oscillator From this clock is derived the following clocks: Clock Value Description HCLK 240 MHz Processor Clock PCK2 12 MHz / 12 288 MHz Peripheral Clock 2 SSC/I2SC1 USB FS 48 MHz USB Full Speed Clock The I2S clocks are setup for 48Khz sampling rate with stereo 16 bit samples giving a 32 bit sample frame The I2S clocks are generated from the WM8904 acting as I2S master using the 12 288 Mhz master clock obtained from Peripheral Clock 2 (PCK2) The I2S clocks will then be generated as follows: I2S Function Value Description LRCK 48 000000 K Sample rate clock BCLK 3072000 Hz Bit Rate Clock MCLK 12 288000 MHz Master Clock ",
							" MPLAB Harmony Configurator: Tools Clock Configuration Uncheck the Main RC Oscillator and check the �Bypass� for the Main Crystal Oscillator When the Bypass is checked it will cause the Main Crystal Oscillator to become disabled An external MEMS oscillator input on the XIN pin is used for Main Clock generation ",
							" I2SC1 Clock Configuration The I2SC1 master requires the I2SC1_GCLK generate an MCLK to approximate 12 288Mhz This is sourced using the PLLA Clock (PLLACK) as shown below USB Speaker PLLA Clock USB Speaker I2S1 Bit Clock for 48Mhz operation Figure 6 I2SC1 Clock Configuration ",
							" AK4954 Codec Using the PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board: Click on the I2S2 Peripheral Set the Frame Select Pin to C2 This is used to sense the start of the Left/Right bit frame clock Select the I2S driver and change the Transfer Queue Size to 64 as shown below Select the I2C1 component and select the �Include Force Write I2C �� This is required for the case where the AK4954 is in reset and does not respond with NACK when the I2C operation completes ",
							" Math Library Using the PIC32 MZ EF Curiosity 2 with the AK4965 Daughter Board: The LIBQ/DSP are used with MIPS MCU with microAptiv core require The default configuration of the audio/math/math libraries component is used as shown below: The DSP Library requires the LIBQ library to be selected Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board: The CMSIS-DSP Library is optimized for use with the ARM M0-M7 MCU cores It is selected using the CMSIS-Pack component (which is loaded automatically with the processor core component) as shown below: ",
							" Harmony Code Generation All the needed drivers middleware libraries and application framework code can be generated from the MHC blocks (MHC components) placed in the MHC Project Graph The generated framework code is placed under the firmware/src/config directory under the name of the configuration used for the Harmony 3 project The initial application code is located in the firmware/src directory app c and app h files which utilize the framework drivers middleware and library APIs located in definitions h located in the config directory All Harmony applications first execute the SYS_Initialize function located in initialization c This is executed from the main function to initialize various subsystems such as the clock ports BSP (board support package) codec usb timers and interrupts The application APP_Initialize function in app c is executed last in the generated SYS_Initialize routine after the system initializations have completed The SYS_Tasks function (located in tasks c) is used to update the USB subsystems WM8904 driver timers etc as well as the application state machine (APP_tasks routine in app c) This function is executed from the main polling loop The polling loop either execute SYS_Tasks repeatably in the infinite loop to perform the updates or it the updates occur as separate processes executed at fixed time intervals using an RTOS schedular The application utilizes a simple state machine (APP_Tasks executed from SYS_Tasks) with the following functions Setup the drivers and USB Library interface Respond to USB Host control commands (�Attach� �Detach� �Suspend�) Initiate and maintains the bidirectional data audio streaming for the \"USB Playback\" function ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/usb_speaker_bass_boost To build this project you must open the audio/apps/usb_speaker_bass_boost/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration ",
							" MPLAB X IDE Project Configurations This table lists and describes the supported configurations of the demonstration which are located within /firmware/src/config Project Name BSP Used Description us_bb_pic32_mz_ef_c2_ak4954 pic32_mz_ef_c2 This demonstration runs on the PIC32 MZ EF Curiosity 2 with the AK4954 Codec us_bb_sam_e70_xult_wm8904_ i2sc_usb sam_e70_xult This demonstration runs on the SAM E70 xPlained Ultra board with the WM8904 Codec ",
							" Configuring the Hardware This section describes how to configure the supported hardware Description Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board configured for the I2SC1 PLIB: Jumper J203 which is next to the SAM E70 Xplained Ultra logo should be jumpered for VBUS (not LED2) To connect to the I2SC1 the jumpers (J6 J7 J8 and J9) on the WM8904 Codec Daughterboard must be oriented toward the pink mic in connector Attach the WM8904 Daughter Board to the X32 connector and connect headphones to the green HP OUT jack as shown in the figure below WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board Headphone Out Jack is green Microphone In Jack is pink Note: the brown wire is a jumper between EXT1-13 to J601(Camera)-14 and is not used for this demo  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 As shown the SAM E70 will be programmed via MPLAB-X through the USB cable connected to the EDBG micro-mini connector Program debug can also be performed over USB this connection if required Using the PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board: The PIC32 MZ EF Curiosity board and the AK4954 Audio Codec Daughter Board only requires the AK4954 Codec Daughterboard to be connected to X32 Header 2 as shown below No jumper settings are required AK4954 Audio Codec Daughter Board on PIC32 MZ EF Curiosity 2 board Headphone Out Jack is green Microphone In Jack is pink  Note: The SAM E70 Xplained Ultra board does not include the AK4954 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC324954 Connect headphones to the green HP OUT jack of the Codec Daughter Board (as shown in the Figure above) As shown the SAM E70 will be programmed through the USB cable connected to the PKOB4 micro-mini connector Program debug can also be performed over USB this connection ",
							" Running the Demonstration This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues Configure the board as described in the previous section Attach either the EDBG or PKOB4 USB cable from the PC Host to the board as described in the prior section To compile select the appropriate MPLAB X � IDE project configuration (see Table above) Compile and program the target device Refer to Building the Application for details Do the following to run the demonstration: After connecting a standard USB cable from the Host PC to either the EDBG or PKOB4 of the respective board compile the application and program the target device Run the device The system will be in a waiting for the USB to be connected (LED1 off) The RGB LED on the Curiosity 2 board will run red indicating no USB connection Connect a standard USB cable to the USB Host via the micro-mini connector located either: Above the push-button switches on the right side of the SAM E70 Xplained board or Above and to the left of the Reset switch on the PIC32 MZ EF Curiosity 2 board Allow the Host computer to acknowledge install drivers (if needed) and enumerate the device No special software is necessary on the Host side LED1 will turn on as the USB function is enumerated (it may blink if audio is not streaming over the connection) The RGB LED on the Curiosity board will turn from red to green If needed configure the Host computer to use the usb_speaker as the selected audio recording device For Windows 7 this is done in the \"Playback\" tab in the \"Sound\" dialog accessed by right clicking the loudspeaker icon on the taskbar For Windows 10 this is accessed by right clicking the loudspeaker icon on the taskbar and clicking �Open Sound Settings� Select the �Speaker( Harmony USB Speaker w/Bass Boost Example)� as the default device Now all sounds should be heard through the headphones Windows 10 Sound Setting showing USB Speaker w/Bass Boost Example selection  Note: The \"Harmony USB Speaker w/Bass Boost Example\" should be available along with a sound level meter indicating audio when playing If no sound level is registering when audio is playing uninstall the driver since it may have incorrect configuration set by a similar connection to one of the other MPLAB-X Harmony USB Audio Demos Open a playback application (such as Window Media Player) and initiate playback which should be heard throught the headphones Four volume levels are available when pressing SWITCH 1 Initially it is set to the lowest playback level Pressing 2 more times will change the volume from the lowest to the highest playback level Pressing 1 more time will mute audio and LED 1 will blink slowly Pressing the button again will go back to the initial setting from which the volume sequence began �Bass Boost� is demonstrated as follows: Using the SAM E70 Xplained board and the WM8904 Daughter Board A �Long Press� of SWITCH 1 will turn on �Bass Boost� This will enhance (boost) the lower audio frequencies heard through the headphones You can cycle from boosted audio to normal audio by repeating the �Long Press� of SWITCH1 Using the PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board Pressing SWITCH 2 will turn on LED 2 and the RGB LED will turn blue (indicating boost) The audio �Bass Boost� filter will be at its lowest level Pressing SWITCH 2 repeatedly will cycle through 4 levels of �Bass Boost� (4 6 8 and 10 dB) A �Long� press of SWITCH 2 will turn off the �Bass Boost� LED 2 will turn off and the RGB LED will turn green Pressing again will turn on �Bass Boost� at the previous level ",
							" Control Description Using the SAM E70 Xplained board and the WM8904 Daughter Board: Button control uses the push button function sequence given in the table below: Function Press Volume Control Level 1 Low (-66 dB) Volume Control Level 2 Medium (-48 dB) Volume Control Level 3 High (-0 dB) Mute Mute Note: Mute will transition to Volume Control Level 1 on the next button push USB operational status is given by LED as shown below: LED Status Status OFF USB cable detached ON USB cable attached Blinking - Fast USB cable attached (no audio) Blinking - Slow Playback muted Using the PIC32 MZ EF Curiosity 2 and the AK4965 Daughter Board: Button control uses SWITCH 1 in the push button function sequence given in the table below: Function Press Volume Control Level 1 Low (-66 dB) Volume Control Level 2 Medium (-48 dB) Volume Control Level 3 High (-0 dB) Mute Mute Note: Mute will transition to Volume Control Level 1 on the next button push USB operational status is given by LED as shown below: ",
							" usb_speaker_hi_res This topic provides instructions and information about the MPLAB Harmony 3 USB Speaker Hi-Res demonstration application which is included in the MPLAB Harmony Library distribution ",
							" Description This demonstration application configures the development board to implement a USB Speaker device configured to run at 96 Khz sampling rate at 24 bit per sample The USB Device driver in Full Speed mode will interface to a USB Host (such as a personal computer) via the USB Device Stack using the V1 0 Audio Function Driver The embedded system will enumerate with a USB audio device endpoint and enable the host system to input audio from the USB port using a standard USB Full-Speed implementation The embedded system will stream USB playback audio to the Codec The Codec Driver sets up the audio interface timing DMA channels and buffer queue to enable a continuous audio stream The digital audio is transmitted to the codec through an I2S data module for playback through a headphone jack ",
							" Architecture The application runs on the SAM E70 Xplained Ultra Board with the following features: One push button (SW1) Two LEDs (amber LED1 and green LED2) Only LED 1 can be used for a USB Device requiring VBUS sense WM8904 Codec Daughter Board mounted on a X32 socket  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 The hi-res application uses the MPLAB Harmony Configurator to setup the USB Audio Device codec and other items in order to play back the USB audio through the WM8904 Codec Module A USB Host system is connected to the micro-mini USB device connector The application detects the cable connection which can also supply device power; recognizes the type of connection (Full Speed); enumerates its functions with the host isochronous audio streaming playback through device Audio stream data is buffered in 1 ms frames for playback using the WM8904 Codec daughter board Audio is heard through the Headphone jack (HP OUT) The following figure shows the basic architecture for the demonstration ",
							" Demonstration Features Playback using an WM8904 codec daughterboard on the SAM E70 xPlained Ultra (E70XULT) board USB connection to a host system using the USB Library Device Stack for a USB Speaker device using E70XULT E70XULT Button processing for volume/mute control USB Attach/Detach and mute status using an LED Utilization of the of I2S peripheral I2SC (as master) ",
							" Tools Setup Differences ",
							" Harmony Configuration The MHC Project Graph for usb_speaker_hi-res is shown below Each block provides configuration parameters to generate the application framework code This includes all the needed drivers middleware libraries The generated framework code is placed under the firmware/src/config directory for this usb_speaker application (usb_speaker_basic_sam_e70_xult_wm8904_usb) The usb_speaker_basic application code is located in the firmware/src directory app c and app h files which utilize the framework drivers middleware and library APIs located in definitions h (as generated by the configurator) ",
							" Harmony Code Generation All Harmony applications use the function SYS_Initialize function located in the source file also located in initialization c This is executed from main to initialize various subsystems such as the clock ports BSP (board support package) codec usb timers and interrupts The application APP_Initialize function in app c is also executed in this routine to setup the application code state machine The USB WM8904 driver and the application state machines (APP_Tasks routine) are all updated via calls located in the function SYS_Tasks executed from the main polling loop located in tasks c The application code is contained in the standard source file app c The application utilizes a simple state machine (APP_Tasks executed from SYS_Tasks) with the following functions Setup the drivers and USB Library interface Respond to USB Host control commands (�Attach� �Detach� �Suspend�) Initiate and maintains the bidirectional data audio streaming for the \"USB Playback\" function ",
							" USB Configuration The application uses USB Library as a \"Device\" stack which will connect to a \"Host\" The USB High Speed Driver is selected to by �Full Speed� (not �High Speed�): The USB Device Layer is configured by selecting the �usb_speaker_demo� with an endpoint buffer size of 64 (bytes) The Audio Function Driver is configured for 5 USB endpoints with a single function having 3 interfaces All of these are defined for a USB Speaker device in the fullSpeedConfigurationDescriptor array variable structure (located in initialization c under the config folder) This structure defines the connection to the host at 96 Khz with 24 bit stereo channel data A packet queue of length APP_QUEUE_SIZE (set to 32) is used for playback data The maximum USB packets size is set to 96 * 3 channels/sample * 2 bytes/channel= 576 bytes which gives a 1ms stereo sample packet size at 96 Khz (the standard data frame length at this rate) thus the buffer size needs to be of the same size The Audio Function Driver is configured with a Audio Read Queue that matches that of the codec driver write queue for this Audio V1 0 USB Speaker interface The Audio Function Driver is configured with a Audio Read Queue that matches that of the codec driver write queue for this Audio V1 0 USB Speaker interface Note: The USB Speaker selection generates a USB Full Speed Descriptor with an isochronous audio stream at 48 Khz/2 Channel/16 bits per channel This code is modified manually to enumerate a 96Khz/ 2 Channel/ 24 bits per channel isochronous audio data stream ",
							" The WM8904 Codec The WM8904 codec uses a TWIHS (I2C) interface for configuration and control register setting and either a SSC for audio data or I2SC I2S interface The default settings are used as shown below: The I2SC1 driver is in �Slave� mode thus the codec usage mode changes to �Slave� The I2S configuration uses a Transfer queue size of 128 matching that that of the USB Read Queue: The I2S data channel is 32 bit long although only 24 bits is used The DMA should be selected to match what is configured in the system block The I2SC1 driver is configured for 24 bit data although a 32 bit channel frame is used This implies that the 24 bit 3 byte packed data buffer received from the USB audio data stream must be unpacked to 32 bit words (4 byte) since a 24 bit frame is not available for the WM8904 ",
							" Pin Manager The buttons LED Switch I2S and I2C interfaces using GPIO pins via the Microchip Harmony Configurator (MHC) Pin Manager as follows for the I2SC1: NAME PORT E70 PIN Notes I2SC1_WS PE00 4 I2S LRCK (Word Select) I2SC1_DO0 PE01 6 I2S DO (Data Out) I2SC1_DI0 PE02 7 I2S DI (Data In) I2SC1_CK PA20 22 I2S BCLK (Bit Clock) I2SC1_GCLK PA19 23 I2S MCLK (Bit Clock as used by the E70 I2SC1 I2S Master) PMC_PCK2 PA18 24 I2S MCLK (Master Clock as used by the WM8904 Codec I2S Slave) SWITCH PA11 66 Push Button LED1 PA05 73 - TWIHS0_TWCK0 PA04 77 I2C TWIHS0_TWD0 PA03 91 I2C STDBY PD11 98 - LED2/VBUS DETECT(J204) PB08 141 J204 set to VBUS DETECT for USB Device ",
							" Clock Manager All clocks are generated from the 12 MHz Main Clock oscillator From this clock is derived the following clocks: Clock Value Description HCLK 300 MHz Processor Clock PCK2 12 MHz Peripheral Clock 2 USB FS 48 MHz USB Full Speed Clock The I2S clocks are setup for 48Khz sampling rate with stereo 32 bit samples giving a 64 bit stereo sample frame The I2S clocks are generated from the WM8904 acting as I2S master using the 24 576 Mhz master clock obtained from I2SC1_GCLK The I2S clocks will then be generated from the MCLK value below to approximate the following clock rates: I2S Function Value Description LRCK 96 000000 K Sample rate clock BCLK 6114000 Hz Bit Rate Clock MCLK 24 576000 MHz Master Clock MPLAB Harmony Configurator: Tools Clock Configuration ",
							" I2SC1 Clock Configuration Uncheck the Main RC Oscillator and check the �Bypass� for the Main Crystal Oscillator When the Bypass is checked it will cause the Main Crystal Oscillator to become disabled An external MEMS oscillator input on the XIN pin is used for Main Clock generation Clock Diagram Peripheral Clock Enable The I2SC1 master requires the I2SC1_GCLK generate an MCLK to approximate 24 576 hz This clock is generated from the PLLA Clock (PLLACK) as shown below I2SC1 Configuration of PLLA Clock (PLLACK) I2SC1 GCLK Configuration ",
							" MPLAB Harmony Configurator: Timer Driver (TC0) The Timer driver configuration Timer driver instance 0 is used by a system for button processing (debounce and long press) and LED blink delay It needs to be set to �Enable Period Interrupt� ",
							" Building the Application This section identifies the MPLAB X IDE project name and location and lists and describes the available configurations for the demonstration Description The parent folder for these files is audio/apps/usb_speaker_hi_res To build this project you must open the audio/apps/usb_speaker_hi_res/firmware/* X project file in MPLAB X IDE that corresponds to your hardware configuration MPLAB X IDE Project This table lists the name and location of the MPLAB X IDE project folder for the demonstration ",
							" MPLAB X IDE Project Configurations This table lists and describes the supported configurations of the demonstration which are located within /firmware/src/config Project Name BSP Used Description us_hi_res_basic_sam_e70_xult_ wm8904_i2sc_usb X sam_e70_xult This demonstration runs on the SAM E70 Xplained Ultra board with the WM8904 daughter board using the I2SC PLIB ",
							" Configuring the Hardware This section describes how to configure the supported hardware Description Using the SAM E70 Xplained Ultra board and the WM8904 Audio Codec Daughter Board using the I2SC PLIB: Jumper J204 which is next to the SAM E70 Xplained Ultra logo should be jumpered for VBUS To connect to the SSC the jumpers (J6 J7 J8 and J9) on the WM8904 Codec Daughterboard must be oriented towards the pink mic in connector See the red outlined jumpers in the below image as reference  Note: The SAM E70 Xplained Ultra board does not include the WM8904 Audio Codec daughterboard which is sold separately on microchipDIRECT as part number AC328904 ",
							" Running the Application This section demonstrates how to run the demonstration Description  Important Prior to using this demonstration it is recommended to review the MPLAB Harmony 3 Release Notes for any known issues Compile and program the target device While compiling select the appropriate MPLAB X IDE project Refer to Building the Application for details Do the following to run the demonstration: Attach the WM8904 Daughter Board to the X32 connector Connect headphones to the HP OUT (green) jack of the WM8904 Audio Codec Daughter Board (see Figure 1 ) Important: The I2SC/SSC jumpers must be in the correct position for the configuration being run Figure 1 WM8904 Audio Codec Daughter Board on SAM E70 Xplained Ultra board Headphone Out Jack is green Note: the brown wire is a jumper which is not relevant for this app Connect power to the board compiles the application and program the target device Run the device The system will be in a waiting for USB to be connected (amber LED1 off) Connect to the USB Host via the micro-mini connector located above the push-button switches on the right side of the board using a standard USB cable Allow the Host computer to acknowledge install drivers (if needed) and enumerate the device No special software is necessary on the Host side Figure 2 Windows 7 Sound Dialog showing USB Microphone with Sound Level Meter If needed configure the Host computer to use the usb_speaker as the selected audio playback device For Windows this is done in the \"Playback\" tab in the \"Sound\" dialog (as shown in Figure 2) accessed by right clicking the loudspeaker icon in the taskbar  Note: The device \"Harmony USB Hi Res Speaker Example\" should be available along with a sound level meter indication audio when playing If no sound level is registering uninstall the driver since it may have incorrect configuration set by a similar connection to one of the other MPLAB-X Harmony Audio Demos Disconnect and reconnect the usb cable to the PC The reconfigured driver will then be installed for the correct USB device Open a playback application (such as Window Media Player) and initiate playback through the USB Speaker Playback will demonstrate that the audio is being heard in the USB Speaker headphones Use the pushbutton switch to mute and change volume levels to the headphone ",
							" Control Description Button control uses the push button function sequence given in the table below: Function Press Volume Control Level 1 Low (-66 dB) Volume Control Level 2 Medium (-48 dB) Volume Control Level 3 High (-0 dB) Mute Mute Note: Mute will transition to Volume Control Level 1 on the next button push USB operational status is given by LED as shown below: LED Status Status OFF USB cable detached ON USB cable attached Blinking Playback muted "];

